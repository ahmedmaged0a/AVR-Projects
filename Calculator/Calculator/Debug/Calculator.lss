
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002ac2  00002b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002418  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e1f  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006007  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  000061da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  000081e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000a35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b06b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 20 14 	call	0x2840	; 0x2840 <main>
      7a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <CLC_enuStartCalculation>:
#include "LCD_int.h"

#include "Calculator_Private.h"

ES_T CLC_enuStartCalculation(s16 Copy_s16NUM1 , s16 Copy_s16NUM2 ,s8 Copy_s8Operator)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	2c 97       	sbiw	r28, 0x0c	; 12
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	9f 83       	std	Y+7, r25	; 0x07
     cdc:	8e 83       	std	Y+6, r24	; 0x06
     cde:	79 87       	std	Y+9, r23	; 0x09
     ce0:	68 87       	std	Y+8, r22	; 0x08
     ce2:	4a 87       	std	Y+10, r20	; 0x0a
	ES_T Local_enuErrorState = ES_NOK;
     ce4:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32Result = 0;
     ce6:	19 82       	std	Y+1, r1	; 0x01
     ce8:	1a 82       	std	Y+2, r1	; 0x02
     cea:	1b 82       	std	Y+3, r1	; 0x03
     cec:	1c 82       	std	Y+4, r1	; 0x04
	switch(Copy_s8Operator)
     cee:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf0:	28 2f       	mov	r18, r24
     cf2:	33 27       	eor	r19, r19
     cf4:	27 fd       	sbrc	r18, 7
     cf6:	30 95       	com	r19
     cf8:	3c 87       	std	Y+12, r19	; 0x0c
     cfa:	2b 87       	std	Y+11, r18	; 0x0b
     cfc:	4b 85       	ldd	r20, Y+11	; 0x0b
     cfe:	5c 85       	ldd	r21, Y+12	; 0x0c
     d00:	4b 32       	cpi	r20, 0x2B	; 43
     d02:	51 05       	cpc	r21, r1
     d04:	c1 f0       	breq	.+48     	; 0xd36 <CLC_enuStartCalculation+0x70>
     d06:	8b 85       	ldd	r24, Y+11	; 0x0b
     d08:	9c 85       	ldd	r25, Y+12	; 0x0c
     d0a:	8c 32       	cpi	r24, 0x2C	; 44
     d0c:	91 05       	cpc	r25, r1
     d0e:	3c f4       	brge	.+14     	; 0xd1e <CLC_enuStartCalculation+0x58>
     d10:	2b 85       	ldd	r18, Y+11	; 0x0b
     d12:	3c 85       	ldd	r19, Y+12	; 0x0c
     d14:	2a 32       	cpi	r18, 0x2A	; 42
     d16:	31 05       	cpc	r19, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <CLC_enuStartCalculation+0x56>
     d1a:	41 c0       	rjmp	.+130    	; 0xd9e <CLC_enuStartCalculation+0xd8>
     d1c:	8f c0       	rjmp	.+286    	; 0xe3c <CLC_enuStartCalculation+0x176>
     d1e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d20:	5c 85       	ldd	r21, Y+12	; 0x0c
     d22:	4d 32       	cpi	r20, 0x2D	; 45
     d24:	51 05       	cpc	r21, r1
     d26:	01 f1       	breq	.+64     	; 0xd68 <CLC_enuStartCalculation+0xa2>
     d28:	8b 85       	ldd	r24, Y+11	; 0x0b
     d2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2c:	8f 32       	cpi	r24, 0x2F	; 47
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <CLC_enuStartCalculation+0x6e>
     d32:	54 c0       	rjmp	.+168    	; 0xddc <CLC_enuStartCalculation+0x116>
     d34:	83 c0       	rjmp	.+262    	; 0xe3c <CLC_enuStartCalculation+0x176>
	{
	case '+':
		Local_s32Result = Copy_s16NUM1 + Copy_s16NUM2;
     d36:	2e 81       	ldd	r18, Y+6	; 0x06
     d38:	3f 81       	ldd	r19, Y+7	; 0x07
     d3a:	88 85       	ldd	r24, Y+8	; 0x08
     d3c:	99 85       	ldd	r25, Y+9	; 0x09
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	aa 27       	eor	r26, r26
     d44:	97 fd       	sbrc	r25, 7
     d46:	a0 95       	com	r26
     d48:	ba 2f       	mov	r27, r26
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	ab 83       	std	Y+3, r26	; 0x03
     d50:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuDisplayIntegerNum(Local_s32Result);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	ab 81       	ldd	r26, Y+3	; 0x03
     d58:	bc 81       	ldd	r27, Y+4	; 0x04
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_enuDisplayIntegerNum>
		Local_enuErrorState = ES_OK;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	6c c0       	rjmp	.+216    	; 0xe40 <CLC_enuStartCalculation+0x17a>
		break;
	case '-':
		Local_s32Result = Copy_s16NUM1 - Copy_s16NUM2;
     d68:	2e 81       	ldd	r18, Y+6	; 0x06
     d6a:	3f 81       	ldd	r19, Y+7	; 0x07
     d6c:	88 85       	ldd	r24, Y+8	; 0x08
     d6e:	99 85       	ldd	r25, Y+9	; 0x09
     d70:	a9 01       	movw	r20, r18
     d72:	48 1b       	sub	r20, r24
     d74:	59 0b       	sbc	r21, r25
     d76:	ca 01       	movw	r24, r20
     d78:	aa 27       	eor	r26, r26
     d7a:	97 fd       	sbrc	r25, 7
     d7c:	a0 95       	com	r26
     d7e:	ba 2f       	mov	r27, r26
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	ab 83       	std	Y+3, r26	; 0x03
     d86:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuDisplayIntegerNum(Local_s32Result);
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	ab 81       	ldd	r26, Y+3	; 0x03
     d8e:	bc 81       	ldd	r27, Y+4	; 0x04
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_enuDisplayIntegerNum>
		Local_enuErrorState = ES_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	51 c0       	rjmp	.+162    	; 0xe40 <CLC_enuStartCalculation+0x17a>
		break;
	case '*':
		Local_s32Result = Copy_s16NUM1 * Copy_s16NUM2;
     d9e:	2e 81       	ldd	r18, Y+6	; 0x06
     da0:	3f 81       	ldd	r19, Y+7	; 0x07
     da2:	88 85       	ldd	r24, Y+8	; 0x08
     da4:	99 85       	ldd	r25, Y+9	; 0x09
     da6:	ac 01       	movw	r20, r24
     da8:	24 9f       	mul	r18, r20
     daa:	c0 01       	movw	r24, r0
     dac:	25 9f       	mul	r18, r21
     dae:	90 0d       	add	r25, r0
     db0:	34 9f       	mul	r19, r20
     db2:	90 0d       	add	r25, r0
     db4:	11 24       	eor	r1, r1
     db6:	aa 27       	eor	r26, r26
     db8:	97 fd       	sbrc	r25, 7
     dba:	a0 95       	com	r26
     dbc:	ba 2f       	mov	r27, r26
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	ab 83       	std	Y+3, r26	; 0x03
     dc4:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuDisplayIntegerNum(Local_s32Result);
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	ab 81       	ldd	r26, Y+3	; 0x03
     dcc:	bc 81       	ldd	r27, Y+4	; 0x04
     dce:	bc 01       	movw	r22, r24
     dd0:	cd 01       	movw	r24, r26
     dd2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_enuDisplayIntegerNum>
		Local_enuErrorState = ES_OK;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	32 c0       	rjmp	.+100    	; 0xe40 <CLC_enuStartCalculation+0x17a>
		break;
	case '/':
		if(Copy_s16NUM2 != 0)
     ddc:	88 85       	ldd	r24, Y+8	; 0x08
     dde:	99 85       	ldd	r25, Y+9	; 0x09
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	d9 f0       	breq	.+54     	; 0xe1a <CLC_enuStartCalculation+0x154>
		{
		Local_s32Result = Copy_s16NUM1 / Copy_s16NUM2;
     de4:	8e 81       	ldd	r24, Y+6	; 0x06
     de6:	9f 81       	ldd	r25, Y+7	; 0x07
     de8:	28 85       	ldd	r18, Y+8	; 0x08
     dea:	39 85       	ldd	r19, Y+9	; 0x09
     dec:	b9 01       	movw	r22, r18
     dee:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     df2:	cb 01       	movw	r24, r22
     df4:	aa 27       	eor	r26, r26
     df6:	97 fd       	sbrc	r25, 7
     df8:	a0 95       	com	r26
     dfa:	ba 2f       	mov	r27, r26
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
		LCD_enuDisplayIntegerNum(Local_s32Result);
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	ab 81       	ldd	r26, Y+3	; 0x03
     e0a:	bc 81       	ldd	r27, Y+4	; 0x04
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_enuDisplayIntegerNum>
		Local_enuErrorState = ES_OK;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <CLC_enuStartCalculation+0x17a>
		}
		else
		{
			Local_enuErrorState = ES_NOK;
     e1a:	1d 82       	std	Y+5, r1	; 0x05
			LCD_enuDisplayChar('E');
     e1c:	85 e4       	ldi	r24, 0x45	; 69
     e1e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
     e22:	82 e5       	ldi	r24, 0x52	; 82
     e24:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
     e28:	82 e5       	ldi	r24, 0x52	; 82
     e2a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('O');
     e2e:	8f e4       	ldi	r24, 0x4F	; 79
     e30:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
     e34:	82 e5       	ldi	r24, 0x52	; 82
     e36:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <CLC_enuStartCalculation+0x17a>
		}
		break;
	default:
		Local_enuErrorState = ES_OUTOFRANGE;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_enuErrorState;
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e42:	2c 96       	adiw	r28, 0x0c	; 12
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DIO_enuInit>:

#include "DIO_config.h"
#include "DIO_private.h"

ES_T DIO_enuInit(void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
     e5e:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     e60:	ea e3       	ldi	r30, 0x3A	; 58
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	8b ee       	ldi	r24, 0xEB	; 235
     e66:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     e68:	e7 e3       	ldi	r30, 0x37	; 55
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     e70:	e4 e3       	ldi	r30, 0x34	; 52
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	80 83       	st	Z, r24
	PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     e88:	e8 e3       	ldi	r30, 0x38	; 56
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	10 82       	st	Z, r1
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DIO_enuSetPortDirection>:
ES_T DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <DIO_enuSetPortDirection+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <DIO_enuSetPortDirection+0x8>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8a 83       	std	Y+2, r24	; 0x02
     eba:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
     ebc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortID)
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3d 83       	std	Y+5, r19	; 0x05
     ec6:	2c 83       	std	Y+4, r18	; 0x04
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	e1 f0       	breq	.+56     	; 0xf0a <DIO_enuSetPortDirection+0x60>
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	2c f4       	brge	.+10     	; 0xee6 <DIO_enuSetPortDirection+0x3c>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	61 f0       	breq	.+24     	; 0xefc <DIO_enuSetPortDirection+0x52>
     ee4:	27 c0       	rjmp	.+78     	; 0xf34 <DIO_enuSetPortDirection+0x8a>
     ee6:	2c 81       	ldd	r18, Y+4	; 0x04
     ee8:	3d 81       	ldd	r19, Y+5	; 0x05
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	a1 f0       	breq	.+40     	; 0xf18 <DIO_enuSetPortDirection+0x6e>
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	b1 f0       	breq	.+44     	; 0xf26 <DIO_enuSetPortDirection+0x7c>
     efa:	1c c0       	rjmp	.+56     	; 0xf34 <DIO_enuSetPortDirection+0x8a>
	{
	case DIO_PORTA:
		DDRA = Copy_u8Value;
     efc:	ea e3       	ldi	r30, 0x3A	; 58
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	17 c0       	rjmp	.+46     	; 0xf38 <DIO_enuSetPortDirection+0x8e>
		break;
	case DIO_PORTB:
		DDRB = Copy_u8Value;
     f0a:	e7 e3       	ldi	r30, 0x37	; 55
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	10 c0       	rjmp	.+32     	; 0xf38 <DIO_enuSetPortDirection+0x8e>
		break;
	case DIO_PORTC:
		DDRC = Copy_u8Value;
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <DIO_enuSetPortDirection+0x8e>
		break;
	case DIO_PORTD:
		DDRD = Copy_u8Value;
     f26:	e1 e3       	ldi	r30, 0x31	; 49
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_enuSetPortDirection+0x8e>
		break;
	default:
		Local_enuErrorState = ES_OUTOFRANGE;
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_enuErrorState;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <DIO_enuSetPortValue>:

ES_T DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_enuSetPortValue+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_enuSetPortValue+0x8>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_enuSetPortValue+0xa>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	8b 83       	std	Y+3, r24	; 0x03
     f5a:	6c 83       	std	Y+4, r22	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
     f5c:	1a 82       	std	Y+2, r1	; 0x02
	switch(Copy_u8PortID)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3e 83       	std	Y+6, r19	; 0x06
     f66:	2d 83       	std	Y+5, r18	; 0x05
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	e1 f0       	breq	.+56     	; 0xfaa <DIO_enuSetPortValue+0x60>
     f72:	2d 81       	ldd	r18, Y+5	; 0x05
     f74:	3e 81       	ldd	r19, Y+6	; 0x06
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <DIO_enuSetPortValue+0x3c>
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <DIO_enuSetPortValue+0x52>
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <DIO_enuSetPortValue+0x8a>
     f86:	2d 81       	ldd	r18, Y+5	; 0x05
     f88:	3e 81       	ldd	r19, Y+6	; 0x06
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	a1 f0       	breq	.+40     	; 0xfb8 <DIO_enuSetPortValue+0x6e>
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	b1 f0       	breq	.+44     	; 0xfc6 <DIO_enuSetPortValue+0x7c>
     f9a:	1c c0       	rjmp	.+56     	; 0xfd4 <DIO_enuSetPortValue+0x8a>
	{
	case DIO_PORTA:
		PORTA = Copy_u8Value;
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	80 83       	st	Z, r24
		ES_T Local_enuErrorState = ES_OK;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <DIO_enuSetPortValue+0x8e>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8Value;
     faa:	e8 e3       	ldi	r30, 0x38	; 56
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <DIO_enuSetPortValue+0x8e>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8Value;
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	09 c0       	rjmp	.+18     	; 0xfd8 <DIO_enuSetPortValue+0x8e>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8Value;
     fc6:	e2 e3       	ldi	r30, 0x32	; 50
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_enuSetPortValue+0x8e>
		break;
	default:
		Local_enuErrorState = ES_OUTOFRANGE;
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fda:	26 96       	adiw	r28, 0x06	; 6
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <DIO_enuTogglePortValue>:

ES_T DIO_enuTogglePortValue(u8 Copy_u8PortID)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <DIO_enuTogglePortValue+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <DIO_enuTogglePortValue+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
     ffa:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortID)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3c 83       	std	Y+4, r19	; 0x04
    1004:	2b 83       	std	Y+3, r18	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	f9 f0       	breq	.+62     	; 0x104e <DIO_enuTogglePortValue+0x62>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <DIO_enuTogglePortValue+0x38>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_enuTogglePortValue+0x4e>
    1022:	33 c0       	rjmp	.+102    	; 0x108a <DIO_enuTogglePortValue+0x9e>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	d1 f0       	breq	.+52     	; 0x1062 <DIO_enuTogglePortValue+0x76>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	f9 f0       	breq	.+62     	; 0x1076 <DIO_enuTogglePortValue+0x8a>
    1038:	28 c0       	rjmp	.+80     	; 0x108a <DIO_enuTogglePortValue+0x9e>
	{
	case DIO_PORTA:
		PORTA = ~PORTA;
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 95       	com	r24
    1046:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	20 c0       	rjmp	.+64     	; 0x108e <DIO_enuTogglePortValue+0xa2>
		break;
	case DIO_PORTB:
		PORTB = ~PORTB;
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 95       	com	r24
    105a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	16 c0       	rjmp	.+44     	; 0x108e <DIO_enuTogglePortValue+0xa2>
		break;
	case DIO_PORTC:
		PORTC = ~PORTC;
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 95       	com	r24
    106e:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	0c c0       	rjmp	.+24     	; 0x108e <DIO_enuTogglePortValue+0xa2>
		break;
	case DIO_PORTD:
		PORTD = ~PORTD;
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	80 95       	com	r24
    1082:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_enuTogglePortValue+0xa2>
		break;
	default:
		Local_enuErrorState = ES_OUTOFRANGE;
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <DIO_enuGetPortValue>:

ES_T DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_Pu8Value)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_enuGetPortValue+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_enuGetPortValue+0x8>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_enuGetPortValue+0xa>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	7c 83       	std	Y+4, r23	; 0x04
    10b0:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    10b2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Pu8Value != NULL)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	09 f4       	brne	.+2      	; 0x10be <DIO_enuGetPortValue+0x20>
    10bc:	46 c0       	rjmp	.+140    	; 0x114a <DIO_enuGetPortValue+0xac>
	{
		switch(Copy_u8PortID)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3e 83       	std	Y+6, r19	; 0x06
    10c6:	2d 83       	std	Y+5, r18	; 0x05
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	f1 f0       	breq	.+60     	; 0x110e <DIO_enuGetPortValue+0x70>
    10d2:	2d 81       	ldd	r18, Y+5	; 0x05
    10d4:	3e 81       	ldd	r19, Y+6	; 0x06
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_enuGetPortValue+0x48>
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <DIO_enuGetPortValue+0x5e>
    10e4:	2f c0       	rjmp	.+94     	; 0x1144 <DIO_enuGetPortValue+0xa6>
    10e6:	2d 81       	ldd	r18, Y+5	; 0x05
    10e8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	c1 f0       	breq	.+48     	; 0x1120 <DIO_enuGetPortValue+0x82>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	e1 f0       	breq	.+56     	; 0x1132 <DIO_enuGetPortValue+0x94>
    10fa:	24 c0       	rjmp	.+72     	; 0x1144 <DIO_enuGetPortValue+0xa6>
		{
		case DIO_PORTA:
			*Copy_Pu8Value = PINA;
    10fc:	e9 e3       	ldi	r30, 0x39	; 57
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	eb 81       	ldd	r30, Y+3	; 0x03
    1104:	fc 81       	ldd	r31, Y+4	; 0x04
    1106:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	20 c0       	rjmp	.+64     	; 0x114e <DIO_enuGetPortValue+0xb0>
			break;
		case DIO_PORTB:
			*Copy_Pu8Value = PINB;
    110e:	e6 e3       	ldi	r30, 0x36	; 54
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	eb 81       	ldd	r30, Y+3	; 0x03
    1116:	fc 81       	ldd	r31, Y+4	; 0x04
    1118:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	17 c0       	rjmp	.+46     	; 0x114e <DIO_enuGetPortValue+0xb0>
			break;
		case DIO_PORTC:
			*Copy_Pu8Value = PINC;
    1120:	e3 e3       	ldi	r30, 0x33	; 51
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	eb 81       	ldd	r30, Y+3	; 0x03
    1128:	fc 81       	ldd	r31, Y+4	; 0x04
    112a:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	0e c0       	rjmp	.+28     	; 0x114e <DIO_enuGetPortValue+0xb0>
			break;
		case DIO_PORTD:
			*Copy_Pu8Value = PIND;
    1132:	e0 e3       	ldi	r30, 0x30	; 48
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	eb 81       	ldd	r30, Y+3	; 0x03
    113a:	fc 81       	ldd	r31, Y+4	; 0x04
    113c:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	05 c0       	rjmp	.+10     	; 0x114e <DIO_enuGetPortValue+0xb0>
			break;
		default:
			Local_enuErrorState = ES_OUTOFRANGE;
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enuGetPortValue+0xb0>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1150:	26 96       	adiw	r28, 0x06	; 6
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_enuSetPinDirection>:
ES_T DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_enuSetPinDirection+0x6>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_enuSetPinDirection+0x8>
    116a:	00 d0       	rcall	.+0      	; 0x116c <DIO_enuSetPinDirection+0xa>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	6b 83       	std	Y+3, r22	; 0x03
    1174:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	08 f0       	brcs	.+2      	; 0x1180 <DIO_enuSetPinDirection+0x1e>
    117e:	d1 c0       	rjmp	.+418    	; 0x1322 <DIO_enuSetPinDirection+0x1c0>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	08 f0       	brcs	.+2      	; 0x1188 <DIO_enuSetPinDirection+0x26>
    1186:	cd c0       	rjmp	.+410    	; 0x1322 <DIO_enuSetPinDirection+0x1c0>
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	08 f0       	brcs	.+2      	; 0x1190 <DIO_enuSetPinDirection+0x2e>
    118e:	c9 c0       	rjmp	.+402    	; 0x1322 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3e 83       	std	Y+6, r19	; 0x06
    1198:	2d 83       	std	Y+5, r18	; 0x05
    119a:	6d 81       	ldd	r22, Y+5	; 0x05
    119c:	7e 81       	ldd	r23, Y+6	; 0x06
    119e:	61 30       	cpi	r22, 0x01	; 1
    11a0:	71 05       	cpc	r23, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <DIO_enuSetPinDirection+0x44>
    11a4:	41 c0       	rjmp	.+130    	; 0x1228 <DIO_enuSetPinDirection+0xc6>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	91 05       	cpc	r25, r1
    11ae:	34 f4       	brge	.+12     	; 0x11bc <DIO_enuSetPinDirection+0x5a>
    11b0:	2d 81       	ldd	r18, Y+5	; 0x05
    11b2:	3e 81       	ldd	r19, Y+6	; 0x06
    11b4:	21 15       	cp	r18, r1
    11b6:	31 05       	cpc	r19, r1
    11b8:	71 f0       	breq	.+28     	; 0x11d6 <DIO_enuSetPinDirection+0x74>
    11ba:	b0 c0       	rjmp	.+352    	; 0x131c <DIO_enuSetPinDirection+0x1ba>
    11bc:	6d 81       	ldd	r22, Y+5	; 0x05
    11be:	7e 81       	ldd	r23, Y+6	; 0x06
    11c0:	62 30       	cpi	r22, 0x02	; 2
    11c2:	71 05       	cpc	r23, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <DIO_enuSetPinDirection+0x66>
    11c6:	59 c0       	rjmp	.+178    	; 0x127a <DIO_enuSetPinDirection+0x118>
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <DIO_enuSetPinDirection+0x72>
    11d2:	7c c0       	rjmp	.+248    	; 0x12cc <DIO_enuSetPinDirection+0x16a>
    11d4:	a3 c0       	rjmp	.+326    	; 0x131c <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASKINGBIT << Copy_u8PinID);
    11d6:	aa e3       	ldi	r26, 0x3A	; 58
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ea e3       	ldi	r30, 0x3A	; 58
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_enuSetPinDirection+0x90>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	2a 95       	dec	r18
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_enuSetPinDirection+0x8c>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    11fc:	aa e3       	ldi	r26, 0x3A	; 58
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ea e3       	ldi	r30, 0x3A	; 58
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	b9 01       	movw	r22, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_enuSetPinDirection+0xba>
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_enuSetPinDirection+0xb6>
    1220:	cb 01       	movw	r24, r22
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	7a c0       	rjmp	.+244    	; 0x131c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASKINGBIT << Copy_u8PinID);
    1228:	a7 e3       	ldi	r26, 0x37	; 55
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e7 e3       	ldi	r30, 0x37	; 55
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_enuSetPinDirection+0xe2>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_enuSetPinDirection+0xde>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    124e:	a7 e3       	ldi	r26, 0x37	; 55
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e7 e3       	ldi	r30, 0x37	; 55
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	b9 01       	movw	r22, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_enuSetPinDirection+0x10c>
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_enuSetPinDirection+0x108>
    1272:	cb 01       	movw	r24, r22
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	51 c0       	rjmp	.+162    	; 0x131c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASKINGBIT << Copy_u8PinID);
    127a:	a4 e3       	ldi	r26, 0x34	; 52
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e4 e3       	ldi	r30, 0x34	; 52
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_enuSetPinDirection+0x134>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	2a 95       	dec	r18
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_enuSetPinDirection+0x130>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    12a0:	a4 e3       	ldi	r26, 0x34	; 52
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e4 e3       	ldi	r30, 0x34	; 52
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	b9 01       	movw	r22, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_enuSetPinDirection+0x15e>
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_enuSetPinDirection+0x15a>
    12c4:	cb 01       	movw	r24, r22
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	28 c0       	rjmp	.+80     	; 0x131c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASKINGBIT << Copy_u8PinID);
    12cc:	a1 e3       	ldi	r26, 0x31	; 49
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e1 e3       	ldi	r30, 0x31	; 49
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enuSetPinDirection+0x186>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	2a 95       	dec	r18
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_enuSetPinDirection+0x182>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    12f2:	a1 e3       	ldi	r26, 0x31	; 49
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e1 e3       	ldi	r30, 0x31	; 49
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	b9 01       	movw	r22, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_enuSetPinDirection+0x1b0>
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_enuSetPinDirection+0x1ac>
    1316:	cb 01       	movw	r24, r22
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
}
    1328:	26 96       	adiw	r28, 0x06	; 6
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <DIO_enuSetPinValue>:
ES_T DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_enuSetPinValue+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_enuSetPinValue+0x8>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_enuSetPinValue+0xa>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03
    134c:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorstate = ES_NOK;
    134e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	08 f0       	brcs	.+2      	; 0x1358 <DIO_enuSetPinValue+0x1e>
    1356:	d1 c0       	rjmp	.+418    	; 0x14fa <DIO_enuSetPinValue+0x1c0>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 30       	cpi	r24, 0x08	; 8
    135c:	08 f0       	brcs	.+2      	; 0x1360 <DIO_enuSetPinValue+0x26>
    135e:	cd c0       	rjmp	.+410    	; 0x14fa <DIO_enuSetPinValue+0x1c0>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	08 f0       	brcs	.+2      	; 0x1368 <DIO_enuSetPinValue+0x2e>
    1366:	c9 c0       	rjmp	.+402    	; 0x14fa <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3e 83       	std	Y+6, r19	; 0x06
    1370:	2d 83       	std	Y+5, r18	; 0x05
    1372:	6d 81       	ldd	r22, Y+5	; 0x05
    1374:	7e 81       	ldd	r23, Y+6	; 0x06
    1376:	61 30       	cpi	r22, 0x01	; 1
    1378:	71 05       	cpc	r23, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_enuSetPinValue+0x44>
    137c:	41 c0       	rjmp	.+130    	; 0x1400 <DIO_enuSetPinValue+0xc6>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	91 05       	cpc	r25, r1
    1386:	34 f4       	brge	.+12     	; 0x1394 <DIO_enuSetPinValue+0x5a>
    1388:	2d 81       	ldd	r18, Y+5	; 0x05
    138a:	3e 81       	ldd	r19, Y+6	; 0x06
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	71 f0       	breq	.+28     	; 0x13ae <DIO_enuSetPinValue+0x74>
    1392:	b0 c0       	rjmp	.+352    	; 0x14f4 <DIO_enuSetPinValue+0x1ba>
    1394:	6d 81       	ldd	r22, Y+5	; 0x05
    1396:	7e 81       	ldd	r23, Y+6	; 0x06
    1398:	62 30       	cpi	r22, 0x02	; 2
    139a:	71 05       	cpc	r23, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <DIO_enuSetPinValue+0x66>
    139e:	59 c0       	rjmp	.+178    	; 0x1452 <DIO_enuSetPinValue+0x118>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_enuSetPinValue+0x72>
    13aa:	7c c0       	rjmp	.+248    	; 0x14a4 <DIO_enuSetPinValue+0x16a>
    13ac:	a3 c0       	rjmp	.+326    	; 0x14f4 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASKINGBIT<<Copy_u8PinID);
    13ae:	ab e3       	ldi	r26, 0x3B	; 59
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_enuSetPinValue+0x90>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	2a 95       	dec	r18
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_enuSetPinValue+0x8c>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    13d4:	ab e3       	ldi	r26, 0x3B	; 59
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	eb e3       	ldi	r30, 0x3B	; 59
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	b9 01       	movw	r22, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_enuSetPinValue+0xba>
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_enuSetPinValue+0xb6>
    13f8:	cb 01       	movw	r24, r22
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	7a c0       	rjmp	.+244    	; 0x14f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASKINGBIT<<Copy_u8PinID);
    1400:	a8 e3       	ldi	r26, 0x38	; 56
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_enuSetPinValue+0xe2>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_enuSetPinValue+0xde>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1426:	a8 e3       	ldi	r26, 0x38	; 56
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e8 e3       	ldi	r30, 0x38	; 56
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_enuSetPinValue+0x10c>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_enuSetPinValue+0x108>
    144a:	cb 01       	movw	r24, r22
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	51 c0       	rjmp	.+162    	; 0x14f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASKINGBIT<<Copy_u8PinID);
    1452:	a5 e3       	ldi	r26, 0x35	; 53
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e3       	ldi	r30, 0x35	; 53
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_enuSetPinValue+0x134>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	2a 95       	dec	r18
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_enuSetPinValue+0x130>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	b9 01       	movw	r22, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_enuSetPinValue+0x15e>
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	8a 95       	dec	r24
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_enuSetPinValue+0x15a>
    149c:	cb 01       	movw	r24, r22
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	28 c0       	rjmp	.+80     	; 0x14f4 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASKINGBIT<<Copy_u8PinID);
    14a4:	a2 e3       	ldi	r26, 0x32	; 50
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_enuSetPinValue+0x186>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	2a 95       	dec	r18
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_enuSetPinValue+0x182>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	b9 01       	movw	r22, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_enuSetPinValue+0x1b0>
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_enuSetPinValue+0x1ac>
    14ee:	cb 01       	movw	r24, r22
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUTOFRANGE;
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1500:	26 96       	adiw	r28, 0x06	; 6
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <DIO_enuToggelPinValue>:
ES_T DIO_enuToggelPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_enuToggelPinValue+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <DIO_enuToggelPinValue+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	6b 83       	std	Y+3, r22	; 0x03
	ES_T Local_enuErrorState = ES_NOK;
    1524:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= DIO_PORTD &&
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <DIO_enuToggelPinValue+0x1c>
    152c:	75 c0       	rjmp	.+234    	; 0x1618 <DIO_enuToggelPinValue+0x106>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 30       	cpi	r24, 0x08	; 8
    1532:	08 f0       	brcs	.+2      	; 0x1536 <DIO_enuToggelPinValue+0x24>
    1534:	71 c0       	rjmp	.+226    	; 0x1618 <DIO_enuToggelPinValue+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3d 83       	std	Y+5, r19	; 0x05
    153e:	2c 83       	std	Y+4, r18	; 0x04
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	49 f1       	breq	.+82     	; 0x159c <DIO_enuToggelPinValue+0x8a>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <DIO_enuToggelPinValue+0x4c>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	61 f0       	breq	.+24     	; 0x1574 <DIO_enuToggelPinValue+0x62>
    155c:	5a c0       	rjmp	.+180    	; 0x1612 <DIO_enuToggelPinValue+0x100>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	71 f1       	breq	.+92     	; 0x15c4 <DIO_enuToggelPinValue+0xb2>
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	e9 f1       	breq	.+122    	; 0x15ec <DIO_enuToggelPinValue+0xda>
    1572:	4f c0       	rjmp	.+158    	; 0x1612 <DIO_enuToggelPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASKINGBIT<<Copy_u8PinID);
    1574:	ab e3       	ldi	r26, 0x3B	; 59
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e3       	ldi	r30, 0x3B	; 59
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <DIO_enuToggelPinValue+0x80>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <DIO_enuToggelPinValue+0x7c>
    1596:	84 27       	eor	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	3b c0       	rjmp	.+118    	; 0x1612 <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASKINGBIT<<Copy_u8PinID);
    159c:	a8 e3       	ldi	r26, 0x38	; 56
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e8 e3       	ldi	r30, 0x38	; 56
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_enuToggelPinValue+0xa8>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_enuToggelPinValue+0xa4>
    15be:	84 27       	eor	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	27 c0       	rjmp	.+78     	; 0x1612 <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASKINGBIT<<Copy_u8PinID);
    15c4:	a5 e3       	ldi	r26, 0x35	; 53
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e5 e3       	ldi	r30, 0x35	; 53
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_enuToggelPinValue+0xd0>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_enuToggelPinValue+0xcc>
    15e6:	84 27       	eor	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <DIO_enuToggelPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASKINGBIT<<Copy_u8PinID);
    15ec:	a2 e3       	ldi	r26, 0x32	; 50
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e2 e3       	ldi	r30, 0x32	; 50
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_enuToggelPinValue+0xf8>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_enuToggelPinValue+0xf4>
    160e:	84 27       	eor	r24, r20
    1610:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_enuToggelPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_enuGetPinValue>:
ES_T DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 * Copy_Pu8Value)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	27 97       	sbiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
    1646:	5d 83       	std	Y+5, r21	; 0x05
    1648:	4c 83       	std	Y+4, r20	; 0x04
	ES_T Local_enuErrorState = ES_NOK;
    164a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_Pu8Value != NULL)
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	9d 81       	ldd	r25, Y+5	; 0x05
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	09 f4       	brne	.+2      	; 0x1656 <DIO_enuGetPinValue+0x28>
    1654:	7e c0       	rjmp	.+252    	; 0x1752 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	08 f0       	brcs	.+2      	; 0x165e <DIO_enuGetPinValue+0x30>
    165c:	77 c0       	rjmp	.+238    	; 0x174c <DIO_enuGetPinValue+0x11e>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 30       	cpi	r24, 0x08	; 8
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_enuGetPinValue+0x38>
    1664:	73 c0       	rjmp	.+230    	; 0x174c <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3f 83       	std	Y+7, r19	; 0x07
    166e:	2e 83       	std	Y+6, r18	; 0x06
    1670:	4e 81       	ldd	r20, Y+6	; 0x06
    1672:	5f 81       	ldd	r21, Y+7	; 0x07
    1674:	41 30       	cpi	r20, 0x01	; 1
    1676:	51 05       	cpc	r21, r1
    1678:	59 f1       	breq	.+86     	; 0x16d0 <DIO_enuGetPinValue+0xa2>
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	9f 81       	ldd	r25, Y+7	; 0x07
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	91 05       	cpc	r25, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <DIO_enuGetPinValue+0x62>
    1684:	2e 81       	ldd	r18, Y+6	; 0x06
    1686:	3f 81       	ldd	r19, Y+7	; 0x07
    1688:	21 15       	cp	r18, r1
    168a:	31 05       	cpc	r19, r1
    168c:	69 f0       	breq	.+26     	; 0x16a8 <DIO_enuGetPinValue+0x7a>
    168e:	5b c0       	rjmp	.+182    	; 0x1746 <DIO_enuGetPinValue+0x118>
    1690:	4e 81       	ldd	r20, Y+6	; 0x06
    1692:	5f 81       	ldd	r21, Y+7	; 0x07
    1694:	42 30       	cpi	r20, 0x02	; 2
    1696:	51 05       	cpc	r21, r1
    1698:	79 f1       	breq	.+94     	; 0x16f8 <DIO_enuGetPinValue+0xca>
    169a:	8e 81       	ldd	r24, Y+6	; 0x06
    169c:	9f 81       	ldd	r25, Y+7	; 0x07
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <DIO_enuGetPinValue+0x78>
    16a4:	3d c0       	rjmp	.+122    	; 0x1720 <DIO_enuGetPinValue+0xf2>
    16a6:	4f c0       	rjmp	.+158    	; 0x1746 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_Pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASKINGBIT);
    16a8:	e9 e3       	ldi	r30, 0x39	; 57
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_enuGetPinValue+0x92>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_enuGetPinValue+0x8e>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ca:	fd 81       	ldd	r31, Y+5	; 0x05
    16cc:	80 83       	st	Z, r24
    16ce:	3b c0       	rjmp	.+118    	; 0x1746 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_Pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASKINGBIT);
    16d0:	e6 e3       	ldi	r30, 0x36	; 54
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_enuGetPinValue+0xba>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_enuGetPinValue+0xb6>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	80 83       	st	Z, r24
    16f6:	27 c0       	rjmp	.+78     	; 0x1746 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_Pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASKINGBIT);
    16f8:	e3 e3       	ldi	r30, 0x33	; 51
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_enuGetPinValue+0xe2>
    170c:	55 95       	asr	r21
    170e:	47 95       	ror	r20
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_enuGetPinValue+0xde>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	ec 81       	ldd	r30, Y+4	; 0x04
    171a:	fd 81       	ldd	r31, Y+5	; 0x05
    171c:	80 83       	st	Z, r24
    171e:	13 c0       	rjmp	.+38     	; 0x1746 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_Pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASKINGBIT);
    1720:	e0 e3       	ldi	r30, 0x30	; 48
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_enuGetPinValue+0x10a>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_enuGetPinValue+0x106>
    173c:	ca 01       	movw	r24, r20
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	ec 81       	ldd	r30, Y+4	; 0x04
    1742:	fd 81       	ldd	r31, Y+5	; 0x05
    1744:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUTOFRANGE;
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
}
    1758:	27 96       	adiw	r28, 0x07	; 7
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <KeyPad_enuInit>:
#include "KeyPad_private.h"

#include "util/delay.h"

ES_T KeyPad_enuInit(void)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	ES_T Local_enuErrorState = ES_NOK;
    1774:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_PORT ,C1_PIN, OUTPUT );
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	63 e0       	ldi	r22, 0x03	; 3
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT ,C2_PIN, OUTPUT );
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT ,C3_PIN, OUTPUT );
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT ,C4_PIN, OUTPUT );
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT ,R1_PIN, INPUT );
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	67 e0       	ldi	r22, 0x07	; 7
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT ,R2_PIN, INPUT );
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	66 e0       	ldi	r22, 0x06	; 6
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT ,R3_PIN, INPUT );
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	65 e0       	ldi	r22, 0x05	; 5
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT ,R4_PIN, INPUT );
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	64 e0       	ldi	r22, 0x04	; 4
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT ,C1_PIN, HIGH);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	63 e0       	ldi	r22, 0x03	; 3
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT ,C2_PIN, HIGH);
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	62 e0       	ldi	r22, 0x02	; 2
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT ,C3_PIN, HIGH);
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT ,C4_PIN, HIGH);
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT ,R1_PIN, PULL_UP);
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	67 e0       	ldi	r22, 0x07	; 7
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT ,R2_PIN, PULL_UP);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	66 e0       	ldi	r22, 0x06	; 6
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT ,R3_PIN, PULL_UP);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	65 e0       	ldi	r22, 0x05	; 5
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT ,R4_PIN, PULL_UP);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

	Local_enuErrorState = ES_OK;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
}
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <KeyPad_enuKeyPressed>:
ES_T KeyPad_enuKeyPressed(u8 *Copy_Pu8Value)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	66 97       	sbiw	r28, 0x16	; 22
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	9e 8b       	std	Y+22, r25	; 0x16
    183a:	8d 8b       	std	Y+21, r24	; 0x15
	*Copy_Pu8Value = 0xff;
    183c:	ed 89       	ldd	r30, Y+21	; 0x15
    183e:	fe 89       	ldd	r31, Y+22	; 0x16
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	80 83       	st	Z, r24

	u8 u8ColumnArrPin[KEYPAD_SIZE] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	8c 83       	std	Y+4, r24	; 0x04
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	8e 83       	std	Y+6, r24	; 0x06
    1850:	1f 82       	std	Y+7, r1	; 0x07

	u8 u8RowArrPin[KEYPAD_SIZE] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    1852:	87 e0       	ldi	r24, 0x07	; 7
    1854:	88 87       	std	Y+8, r24	; 0x08
    1856:	86 e0       	ldi	r24, 0x06	; 6
    1858:	89 87       	std	Y+9, r24	; 0x09
    185a:	85 e0       	ldi	r24, 0x05	; 5
    185c:	8a 87       	std	Y+10, r24	; 0x0a
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	8b 87       	std	Y+11, r24	; 0x0b

	u8 u8ColumnArrPORT[KEYPAD_SIZE] = {C1_PORT, C2_PORT, C3_PORT, C4_PORT};
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	8c 87       	std	Y+12, r24	; 0x0c
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	8d 87       	std	Y+13, r24	; 0x0d
    186a:	83 e0       	ldi	r24, 0x03	; 3
    186c:	8e 87       	std	Y+14, r24	; 0x0e
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	8f 87       	std	Y+15, r24	; 0x0f

	u8 u8RowArrPORT[KEYPAD_SIZE] = {R1_PORT, R2_PORT, R3_PORT, R4_PORT};
    1872:	83 e0       	ldi	r24, 0x03	; 3
    1874:	88 8b       	std	Y+16, r24	; 0x10
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	89 8b       	std	Y+17, r24	; 0x11
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	8a 8b       	std	Y+18, r24	; 0x12
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	8b 8b       	std	Y+19, r24	; 0x13

	ES_T Local_enuErrorState = ES_NOK;
    1882:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8ColumCount=ZERO , Local_u8RowCount=ZERO ;
    1884:	1a 82       	std	Y+2, r1	; 0x02
    1886:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8CheckValue=ZERO;
    1888:	1c 8a       	std	Y+20, r1	; 0x14

	if(Copy_Pu8Value != NULL)
    188a:	8d 89       	ldd	r24, Y+21	; 0x15
    188c:	9e 89       	ldd	r25, Y+22	; 0x16
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	09 f4       	brne	.+2      	; 0x1894 <KeyPad_enuKeyPressed+0x70>
    1892:	93 c0       	rjmp	.+294    	; 0x19ba <KeyPad_enuKeyPressed+0x196>
	{
		for(Local_u8ColumCount = ZERO; Local_u8ColumCount < KEYPAD_SIZE; Local_u8ColumCount++)
    1894:	1a 82       	std	Y+2, r1	; 0x02
    1896:	8a c0       	rjmp	.+276    	; 0x19ac <KeyPad_enuKeyPressed+0x188>
		{
			DIO_enuSetPinValue(u8ColumnArrPORT[Local_u8ColumCount],u8ColumnArrPin[Local_u8ColumCount] , LOW);
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	ce 01       	movw	r24, r28
    18a0:	0c 96       	adiw	r24, 0x0c	; 12
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	40 81       	ld	r20, Z
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	ce 01       	movw	r24, r28
    18b2:	04 96       	adiw	r24, 0x04	; 4
    18b4:	fc 01       	movw	r30, r24
    18b6:	e2 0f       	add	r30, r18
    18b8:	f3 1f       	adc	r31, r19
    18ba:	90 81       	ld	r25, Z
    18bc:	84 2f       	mov	r24, r20
    18be:	69 2f       	mov	r22, r25
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

			for(Local_u8RowCount = ZERO; Local_u8RowCount < KEYPAD_SIZE; Local_u8RowCount++)
    18c6:	19 82       	std	Y+1, r1	; 0x01
    18c8:	53 c0       	rjmp	.+166    	; 0x1970 <KeyPad_enuKeyPressed+0x14c>
			{
				DIO_enuGetPinValue( u8RowArrPORT[Local_u8RowCount],u8RowArrPin[Local_u8RowCount] , &Local_u8CheckValue);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	ce 01       	movw	r24, r28
    18d2:	40 96       	adiw	r24, 0x10	; 16
    18d4:	fc 01       	movw	r30, r24
    18d6:	e2 0f       	add	r30, r18
    18d8:	f3 1f       	adc	r31, r19
    18da:	40 81       	ld	r20, Z
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	ce 01       	movw	r24, r28
    18e4:	08 96       	adiw	r24, 0x08	; 8
    18e6:	fc 01       	movw	r30, r24
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	90 81       	ld	r25, Z
    18ee:	9e 01       	movw	r18, r28
    18f0:	2c 5e       	subi	r18, 0xEC	; 236
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	84 2f       	mov	r24, r20
    18f6:	69 2f       	mov	r22, r25
    18f8:	a9 01       	movw	r20, r18
    18fa:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_enuGetPinValue>
				if(Local_u8CheckValue == ZERO)
    18fe:	8c 89       	ldd	r24, Y+20	; 0x14
    1900:	88 23       	and	r24, r24
    1902:	99 f5       	brne	.+102    	; 0x196a <KeyPad_enuKeyPressed+0x146>
    1904:	1a c0       	rjmp	.+52     	; 0x193a <KeyPad_enuKeyPressed+0x116>
				{
					while(!Local_u8CheckValue)
					{
						DIO_enuGetPinValue( u8RowArrPORT[Local_u8RowCount],u8RowArrPin[Local_u8RowCount] , &Local_u8CheckValue);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	ce 01       	movw	r24, r28
    190e:	40 96       	adiw	r24, 0x10	; 16
    1910:	fc 01       	movw	r30, r24
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	40 81       	ld	r20, Z
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	ce 01       	movw	r24, r28
    1920:	08 96       	adiw	r24, 0x08	; 8
    1922:	fc 01       	movw	r30, r24
    1924:	e2 0f       	add	r30, r18
    1926:	f3 1f       	adc	r31, r19
    1928:	90 81       	ld	r25, Z
    192a:	9e 01       	movw	r18, r28
    192c:	2c 5e       	subi	r18, 0xEC	; 236
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	84 2f       	mov	r24, r20
    1932:	69 2f       	mov	r22, r25
    1934:	a9 01       	movw	r20, r18
    1936:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_enuGetPinValue>
			for(Local_u8RowCount = ZERO; Local_u8RowCount < KEYPAD_SIZE; Local_u8RowCount++)
			{
				DIO_enuGetPinValue( u8RowArrPORT[Local_u8RowCount],u8RowArrPin[Local_u8RowCount] , &Local_u8CheckValue);
				if(Local_u8CheckValue == ZERO)
				{
					while(!Local_u8CheckValue)
    193a:	8c 89       	ldd	r24, Y+20	; 0x14
    193c:	88 23       	and	r24, r24
    193e:	19 f3       	breq	.-58     	; 0x1906 <KeyPad_enuKeyPressed+0xe2>
					{
						DIO_enuGetPinValue( u8RowArrPORT[Local_u8RowCount],u8RowArrPin[Local_u8RowCount] , &Local_u8CheckValue);
					}
					*Copy_Pu8Value = u8ButtonArr[Local_u8ColumCount][Local_u8RowCount];
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	48 2f       	mov	r20, r24
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	ca 01       	movw	r24, r20
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	fc 01       	movw	r30, r24
    195c:	e8 59       	subi	r30, 0x98	; 152
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	80 81       	ld	r24, Z
    1962:	ed 89       	ldd	r30, Y+21	; 0x15
    1964:	fe 89       	ldd	r31, Y+22	; 0x16
    1966:	80 83       	st	Z, r24
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <KeyPad_enuKeyPressed+0x154>
	{
		for(Local_u8ColumCount = ZERO; Local_u8ColumCount < KEYPAD_SIZE; Local_u8ColumCount++)
		{
			DIO_enuSetPinValue(u8ColumnArrPORT[Local_u8ColumCount],u8ColumnArrPin[Local_u8ColumCount] , LOW);

			for(Local_u8RowCount = ZERO; Local_u8RowCount < KEYPAD_SIZE; Local_u8RowCount++)
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	08 f4       	brcc	.+2      	; 0x1978 <KeyPad_enuKeyPressed+0x154>
    1976:	a9 cf       	rjmp	.-174    	; 0x18ca <KeyPad_enuKeyPressed+0xa6>
					*Copy_Pu8Value = u8ButtonArr[Local_u8ColumCount][Local_u8RowCount];
					break;
				}
			}

			DIO_enuSetPinValue(u8ColumnArrPORT[Local_u8ColumCount],u8ColumnArrPin[Local_u8ColumCount] , HIGH);
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	ce 01       	movw	r24, r28
    1980:	0c 96       	adiw	r24, 0x0c	; 12
    1982:	fc 01       	movw	r30, r24
    1984:	e2 0f       	add	r30, r18
    1986:	f3 1f       	adc	r31, r19
    1988:	40 81       	ld	r20, Z
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	ce 01       	movw	r24, r28
    1992:	04 96       	adiw	r24, 0x04	; 4
    1994:	fc 01       	movw	r30, r24
    1996:	e2 0f       	add	r30, r18
    1998:	f3 1f       	adc	r31, r19
    199a:	90 81       	ld	r25, Z
    199c:	84 2f       	mov	r24, r20
    199e:	69 2f       	mov	r22, r25
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	u8 Local_u8ColumCount=ZERO , Local_u8RowCount=ZERO ;
	u8 Local_u8CheckValue=ZERO;

	if(Copy_Pu8Value != NULL)
	{
		for(Local_u8ColumCount = ZERO; Local_u8ColumCount < KEYPAD_SIZE; Local_u8ColumCount++)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	8a 83       	std	Y+2, r24	; 0x02
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <KeyPad_enuKeyPressed+0x190>
    19b2:	72 cf       	rjmp	.-284    	; 0x1898 <KeyPad_enuKeyPressed+0x74>
				}
			}

			DIO_enuSetPinValue(u8ColumnArrPORT[Local_u8ColumCount],u8ColumnArrPin[Local_u8ColumCount] , HIGH);
		}
		Local_enuErrorState = ES_OK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8b 83       	std	Y+3, r24	; 0x03
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <KeyPad_enuKeyPressed+0x19a>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_enuErrorState;
    19be:	8b 81       	ldd	r24, Y+3	; 0x03

}
    19c0:	66 96       	adiw	r28, 0x16	; 22
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_T LCD_enuInit(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	e9 97       	sbiw	r28, 0x39	; 57
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
	ES_T Local_enuErrorState = ES_NOK;
    19e6:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	63 e0       	ldi	r22, 0x03	; 3
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	65 e0       	ldi	r22, 0x05	; 5
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	66 e0       	ldi	r22, 0x06	; 6
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	ac e0       	ldi	r26, 0x0C	; 12
    1a34:	b2 e4       	ldi	r27, 0x42	; 66
    1a36:	8d ab       	std	Y+53, r24	; 0x35
    1a38:	9e ab       	std	Y+54, r25	; 0x36
    1a3a:	af ab       	std	Y+55, r26	; 0x37
    1a3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a40:	7e a9       	ldd	r23, Y+54	; 0x36
    1a42:	8f a9       	ldd	r24, Y+55	; 0x37
    1a44:	98 ad       	ldd	r25, Y+56	; 0x38
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	53 e4       	ldi	r21, 0x43	; 67
    1a4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	89 ab       	std	Y+49, r24	; 0x31
    1a58:	9a ab       	std	Y+50, r25	; 0x32
    1a5a:	ab ab       	std	Y+51, r26	; 0x33
    1a5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <LCD_enuInit+0xae>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	98 ab       	std	Y+48, r25	; 0x30
    1a7c:	8f a7       	std	Y+47, r24	; 0x2f
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1a80:	69 a9       	ldd	r22, Y+49	; 0x31
    1a82:	7a a9       	ldd	r23, Y+50	; 0x32
    1a84:	8b a9       	ldd	r24, Y+51	; 0x33
    1a86:	9c a9       	ldd	r25, Y+52	; 0x34
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	98 ab       	std	Y+48, r25	; 0x30
    1abe:	8f a7       	std	Y+47, r24	; 0x2f
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_enuInit+0x10e>
    1ac2:	89 e1       	ldi	r24, 0x19	; 25
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9e a7       	std	Y+46, r25	; 0x2e
    1ac8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1acc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_enuInit+0xfc>
    1ad2:	9e a7       	std	Y+46, r25	; 0x2e
    1ad4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <LCD_enuInit+0xf0>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	9c a7       	std	Y+44, r25	; 0x2c
    1b04:	8b a7       	std	Y+43, r24	; 0x2b
    1b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_enuInit+0x138>
    1b0e:	9c a7       	std	Y+44, r25	; 0x2c
    1b10:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	67 e0       	ldi	r22, 0x07	; 7
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1b3a:	88 e3       	ldi	r24, 0x38	; 56
    1b3c:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	8f a3       	std	Y+39, r24	; 0x27
    1b4a:	98 a7       	std	Y+40, r25	; 0x28
    1b4c:	a9 a7       	std	Y+41, r26	; 0x29
    1b4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6f a1       	ldd	r22, Y+39	; 0x27
    1b52:	78 a5       	ldd	r23, Y+40	; 0x28
    1b54:	89 a5       	ldd	r24, Y+41	; 0x29
    1b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8b a3       	std	Y+35, r24	; 0x23
    1b6a:	9c a3       	std	Y+36, r25	; 0x24
    1b6c:	ad a3       	std	Y+37, r26	; 0x25
    1b6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b70:	6b a1       	ldd	r22, Y+35	; 0x23
    1b72:	7c a1       	ldd	r23, Y+36	; 0x24
    1b74:	8d a1       	ldd	r24, Y+37	; 0x25
    1b76:	9e a1       	ldd	r25, Y+38	; 0x26
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_enuInit+0x1c0>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1b92:	6b a1       	ldd	r22, Y+35	; 0x23
    1b94:	7c a1       	ldd	r23, Y+36	; 0x24
    1b96:	8d a1       	ldd	r24, Y+37	; 0x25
    1b98:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bac:	78 a5       	ldd	r23, Y+40	; 0x28
    1bae:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_enuInit+0x220>
    1bd4:	89 e1       	ldi	r24, 0x19	; 25
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	98 a3       	std	Y+32, r25	; 0x20
    1bda:	8f 8f       	std	Y+31, r24	; 0x1f
    1bdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bde:	98 a1       	ldd	r25, Y+32	; 0x20
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_enuInit+0x20e>
    1be4:	98 a3       	std	Y+32, r25	; 0x20
    1be6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bea:	9a a1       	ldd	r25, Y+34	; 0x22
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_enuInit+0x202>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1c00:	8d a1       	ldd	r24, Y+37	; 0x25
    1c02:	9e a1       	ldd	r25, Y+38	; 0x26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9a a3       	std	Y+34, r25	; 0x22
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	89 a1       	ldd	r24, Y+33	; 0x21
    1c12:	9a a1       	ldd	r25, Y+34	; 0x22
    1c14:	9e 8f       	std	Y+30, r25	; 0x1e
    1c16:	8d 8f       	std	Y+29, r24	; 0x1d
    1c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_enuInit+0x24a>
    1c20:	9e 8f       	std	Y+30, r25	; 0x1e
    1c22:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1c24:	8f e0       	ldi	r24, 0x0F	; 15
    1c26:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	a0 e8       	ldi	r26, 0x80	; 128
    1c30:	bf e3       	ldi	r27, 0x3F	; 63
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    1c34:	9a 8f       	std	Y+26, r25	; 0x1a
    1c36:	ab 8f       	std	Y+27, r26	; 0x1b
    1c38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	53 e4       	ldi	r21, 0x43	; 67
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8d 8b       	std	Y+21, r24	; 0x15
    1c54:	9e 8b       	std	Y+22, r25	; 0x16
    1c56:	af 8b       	std	Y+23, r26	; 0x17
    1c58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <LCD_enuInit+0x2aa>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 8b       	std	Y+20, r25	; 0x14
    1c78:	8b 8b       	std	Y+19, r24	; 0x13
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	69 8d       	ldd	r22, Y+25	; 0x19
    1c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <LCD_enuInit+0x30a>
    1cbe:	89 e1       	ldi	r24, 0x19	; 25
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9a 8b       	std	Y+18, r25	; 0x12
    1cc4:	89 8b       	std	Y+17, r24	; 0x11
    1cc6:	89 89       	ldd	r24, Y+17	; 0x11
    1cc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_enuInit+0x2f8>
    1cce:	9a 8b       	std	Y+18, r25	; 0x12
    1cd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cde:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <LCD_enuInit+0x2ec>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	98 8b       	std	Y+16, r25	; 0x10
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	98 89       	ldd	r25, Y+16	; 0x10
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_enuInit+0x334>
    1d0a:	98 8b       	std	Y+16, r25	; 0x10
    1d0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e4       	ldi	r27, 0x40	; 64
    1d1c:	8b 87       	std	Y+11, r24	; 0x0b
    1d1e:	9c 87       	std	Y+12, r25	; 0x0c
    1d20:	ad 87       	std	Y+13, r26	; 0x0d
    1d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a e7       	ldi	r20, 0x7A	; 122
    1d32:	53 e4       	ldi	r21, 0x43	; 67
    1d34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8f 83       	std	Y+7, r24	; 0x07
    1d3e:	98 87       	std	Y+8, r25	; 0x08
    1d40:	a9 87       	std	Y+9, r26	; 0x09
    1d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <LCD_enuInit+0x394>
		__ticks = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	3f ef       	ldi	r19, 0xFF	; 255
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	57 e4       	ldi	r21, 0x47	; 71
    1d76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	4c f5       	brge	.+82     	; 0x1dd0 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e2       	ldi	r20, 0x20	; 32
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_enuInit+0x3f4>
    1da8:	89 e1       	ldi	r24, 0x19	; 25
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	8b 83       	std	Y+3, r24	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_enuInit+0x3e2>
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	69 f7       	brne	.-38     	; 0x1da8 <LCD_enuInit+0x3d6>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_enuInit+0x41e>
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>

	return Local_enuErrorState;
    1dfe:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1e00:	e9 96       	adiw	r28, 0x39	; 57
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LCD_enuDisplayChar>:

ES_T LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_enuDisplayChar+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    1e1e:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>

	return Local_enuErrorState;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_enuSendCommand>:

ES_T LCD_enuSendCommand(u8 Copy_u8Command)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <LCD_enuSendCommand+0x6>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	8a 83       	std	Y+2, r24	; 0x02
	ES_T Local_enuErrorState = ES_NOK;
    1e48:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>


	return Local_enuErrorState;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_enuDisplayIntegerNum>:


ES_T LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	2b 97       	sbiw	r28, 0x0b	; 11
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	68 87       	std	Y+8, r22	; 0x08
    1e7c:	79 87       	std	Y+9, r23	; 0x09
    1e7e:	8a 87       	std	Y+10, r24	; 0x0a
    1e80:	9b 87       	std	Y+11, r25	; 0x0b
	ES_T Local_enuErrorState = ES_NOK;
    1e82:	1f 82       	std	Y+7, r1	; 0x07
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	s32 Local_s32Reverse=0;
    1e8e:	1b 82       	std	Y+3, r1	; 0x03
    1e90:	1c 82       	std	Y+4, r1	; 0x04
    1e92:	1d 82       	std	Y+5, r1	; 0x05
    1e94:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1e96:	1a 82       	std	Y+2, r1	; 0x02
    1e98:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    1e9a:	88 85       	ldd	r24, Y+8	; 0x08
    1e9c:	99 85       	ldd	r25, Y+9	; 0x09
    1e9e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1ea0:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ea2:	bb 23       	and	r27, r27
    1ea4:	94 f4       	brge	.+36     	; 0x1eca <LCD_enuDisplayIntegerNum+0x64>
	{
		LCD_vidLatch('-');
    1ea6:	8d e2       	ldi	r24, 0x2D	; 45
    1ea8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    1eac:	88 85       	ldd	r24, Y+8	; 0x08
    1eae:	99 85       	ldd	r25, Y+9	; 0x09
    1eb0:	aa 85       	ldd	r26, Y+10	; 0x0a
    1eb2:	bb 85       	ldd	r27, Y+11	; 0x0b
    1eb4:	b0 95       	com	r27
    1eb6:	a0 95       	com	r26
    1eb8:	90 95       	com	r25
    1eba:	81 95       	neg	r24
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	af 4f       	sbci	r26, 0xFF	; 255
    1ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec2:	88 87       	std	Y+8, r24	; 0x08
    1ec4:	99 87       	std	Y+9, r25	; 0x09
    1ec6:	aa 87       	std	Y+10, r26	; 0x0a
    1ec8:	bb 87       	std	Y+11, r27	; 0x0b
	}
	if(Copy_s32Num !=0)
    1eca:	88 85       	ldd	r24, Y+8	; 0x08
    1ecc:	99 85       	ldd	r25, Y+9	; 0x09
    1ece:	aa 85       	ldd	r26, Y+10	; 0x0a
    1ed0:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	a1 05       	cpc	r26, r1
    1ed6:	b1 05       	cpc	r27, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <LCD_enuDisplayIntegerNum+0x76>
    1eda:	76 c0       	rjmp	.+236    	; 0x1fc8 <LCD_enuDisplayIntegerNum+0x162>
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_enuDisplayIntegerNum+0xf6>
	{
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1ede:	88 85       	ldd	r24, Y+8	; 0x08
    1ee0:	99 85       	ldd	r25, Y+9	; 0x09
    1ee2:	aa 85       	ldd	r26, Y+10	; 0x0a
    1ee4:	bb 85       	ldd	r27, Y+11	; 0x0b
    1ee6:	2a e0       	ldi	r18, 0x0A	; 10
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	ad 81       	ldd	r26, Y+5	; 0x05
    1f02:	be 81       	ldd	r27, Y+6	; 0x06
    1f04:	2a e0       	ldi	r18, 0x0A	; 10
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 a5 14 	call	0x294a	; 0x294a <__mulsi3>
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e0       	ldi	r26, 0x00	; 0
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	a4 1f       	adc	r26, r20
    1f28:	b5 1f       	adc	r27, r21
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	ad 83       	std	Y+5, r26	; 0x05
    1f30:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1f32:	88 85       	ldd	r24, Y+8	; 0x08
    1f34:	99 85       	ldd	r25, Y+9	; 0x09
    1f36:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f38:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f3a:	2a e0       	ldi	r18, 0x0A	; 10
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    1f4a:	da 01       	movw	r26, r20
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	88 87       	std	Y+8, r24	; 0x08
    1f50:	99 87       	std	Y+9, r25	; 0x09
    1f52:	aa 87       	std	Y+10, r26	; 0x0a
    1f54:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	if(Copy_s32Num !=0)
	{
	while (Copy_s32Num)
    1f5c:	88 85       	ldd	r24, Y+8	; 0x08
    1f5e:	99 85       	ldd	r25, Y+9	; 0x09
    1f60:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f62:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	a1 05       	cpc	r26, r1
    1f68:	b1 05       	cpc	r27, r1
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <LCD_enuDisplayIntegerNum+0x108>
    1f6c:	b8 cf       	rjmp	.-144    	; 0x1ede <LCD_enuDisplayIntegerNum+0x78>
    1f6e:	28 c0       	rjmp	.+80     	; 0x1fc0 <LCD_enuDisplayIntegerNum+0x15a>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	ad 81       	ldd	r26, Y+5	; 0x05
    1f76:	be 81       	ldd	r27, Y+6	; 0x06
    1f78:	2a e0       	ldi	r18, 0x0A	; 10
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_vidLatch(Local_u8Remainder + '0');
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	80 5d       	subi	r24, 0xD0	; 208
    1f92:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f9c:	be 81       	ldd	r27, Y+6	; 0x06
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    1fae:	da 01       	movw	r26, r20
    1fb0:	c9 01       	movw	r24, r18
    1fb2:	8b 83       	std	Y+3, r24	; 0x03
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	ad 83       	std	Y+5, r26	; 0x05
    1fb8:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	81 50       	subi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	a9 f6       	brne	.-86     	; 0x1f70 <LCD_enuDisplayIntegerNum+0x10a>
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <LCD_enuDisplayIntegerNum+0x168>
		Local_u8NumDigit --;
	}
	}
	else
	{
		LCD_vidLatch('0');
    1fc8:	80 e3       	ldi	r24, 0x30	; 48
    1fca:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
	}

	return Local_enuErrorState;
    1fce:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1fd0:	2b 96       	adiw	r28, 0x0b	; 11
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <LCD_enuDisplayExtraChar>:

ES_T LCD_enuDisplayExtraChar(u8* Copy_pu8Character,u8 Copy_u8CharNum ,u8 Copy_u8Position , u8 Copy_u8Entry)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	27 97       	sbiw	r28, 0x07	; 7
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	6d 83       	std	Y+5, r22	; 0x05
    1ffc:	4e 83       	std	Y+6, r20	; 0x06
    1ffe:	2f 83       	std	Y+7, r18	; 0x07
	ES_T Local_enuErrorState = ES_NOK;
    2000:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_u8CharNum <= 8)
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	89 30       	cpi	r24, 0x09	; 9
    2006:	08 f0       	brcs	.+2      	; 0x200a <LCD_enuDisplayExtraChar+0x28>
    2008:	42 c0       	rjmp	.+132    	; 0x208e <LCD_enuDisplayExtraChar+0xac>
	{
		LCD_invidSendCommend(0x40);
    200a:	80 e4       	ldi	r24, 0x40	; 64
    200c:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    201a:	19 82       	std	Y+1, r1	; 0x01
    201c:	0e c0       	rjmp	.+28     	; 0x203a <LCD_enuDisplayExtraChar+0x58>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	fc 01       	movw	r30, r24
    202a:	e2 0f       	add	r30, r18
    202c:	f3 1f       	adc	r31, r19
    202e:	80 81       	ld	r24, Z
    2030:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
	if (Copy_u8CharNum <= 8)
	{
		LCD_invidSendCommend(0x40);
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	28 17       	cp	r18, r24
    2054:	39 07       	cpc	r19, r25
    2056:	1c f3       	brlt	.-58     	; 0x201e <LCD_enuDisplayExtraChar+0x3c>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
		}
		if (Copy_u8Entry == 0x04)
    2058:	8f 81       	ldd	r24, Y+7	; 0x07
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	31 f4       	brne	.+12     	; 0x206a <LCD_enuDisplayExtraChar+0x88>
		{
			LCD_invidSendCommend(Copy_u8Position);
    205e:	8e 81       	ldd	r24, Y+6	; 0x06
    2060:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
			LCD_invidSendCommend(Copy_u8Entry);
    2064:	8f 81       	ldd	r24, Y+7	; 0x07
    2066:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_invidSendCommend>
		}\
    206a:	19 82       	std	Y+1, r1	; 0x01
    206c:	0b c0       	rjmp	.+22     	; 0x2084 <LCD_enuDisplayExtraChar+0xa2>
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
		{
			DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
			LCD_vidLatch(Local_u8Iter);
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		}
		if (Copy_u8Entry == 0x04)
		{
			LCD_invidSendCommend(Copy_u8Position);
			LCD_invidSendCommend(Copy_u8Entry);
		}\
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	89 83       	std	Y+1, r24	; 0x01
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    2084:	99 81       	ldd	r25, Y+1	; 0x01
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	98 17       	cp	r25, r24
    208a:	88 f3       	brcs	.-30     	; 0x206e <LCD_enuDisplayExtraChar+0x8c>
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <LCD_enuDisplayExtraChar+0xb0>
			LCD_vidLatch(Local_u8Iter);
		}
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2094:	27 96       	adiw	r28, 0x07	; 7
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <LCD_vidLatch>:

static void LCD_vidLatch(u8 Copy_u8Data)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	6d 97       	sbiw	r28, 0x1d	; 29
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	98 2f       	mov	r25, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	99 27       	eor	r25, r25
    20d8:	99 1f       	adc	r25, r25
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	63 e0       	ldi	r22, 0x03	; 3
    20de:	49 2f       	mov	r20, r25
    20e0:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    20e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e6:	82 95       	swap	r24
    20e8:	86 95       	lsr	r24
    20ea:	86 95       	lsr	r24
    20ec:	83 70       	andi	r24, 0x03	; 3
    20ee:	98 2f       	mov	r25, r24
    20f0:	91 70       	andi	r25, 0x01	; 1
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	64 e0       	ldi	r22, 0x04	; 4
    20f6:	49 2f       	mov	r20, r25
    20f8:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    20fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20fe:	82 95       	swap	r24
    2100:	86 95       	lsr	r24
    2102:	87 70       	andi	r24, 0x07	; 7
    2104:	98 2f       	mov	r25, r24
    2106:	91 70       	andi	r25, 0x01	; 1
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	65 e0       	ldi	r22, 0x05	; 5
    210c:	49 2f       	mov	r20, r25
    210e:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	82 95       	swap	r24
    2116:	8f 70       	andi	r24, 0x0F	; 15
    2118:	98 2f       	mov	r25, r24
    211a:	91 70       	andi	r25, 0x01	; 1
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	49 2f       	mov	r20, r25
    2122:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2128:	86 95       	lsr	r24
    212a:	86 95       	lsr	r24
    212c:	86 95       	lsr	r24
    212e:	98 2f       	mov	r25, r24
    2130:	91 70       	andi	r25, 0x01	; 1
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	67 e0       	ldi	r22, 0x07	; 7
    2136:	49 2f       	mov	r20, r25
    2138:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	86 95       	lsr	r24
    2140:	86 95       	lsr	r24
    2142:	98 2f       	mov	r25, r24
    2144:	91 70       	andi	r25, 0x01	; 1
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	49 2f       	mov	r20, r25
    214c:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	86 95       	lsr	r24
    2154:	98 2f       	mov	r25, r24
    2156:	91 70       	andi	r25, 0x01	; 1
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	49 2f       	mov	r20, r25
    215e:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    2162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2164:	98 2f       	mov	r25, r24
    2166:	91 70       	andi	r25, 0x01	; 1
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	62 e0       	ldi	r22, 0x02	; 2
    216c:	49 2f       	mov	r20, r25
    216e:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e2       	ldi	r26, 0x20	; 32
    2182:	b1 e4       	ldi	r27, 0x41	; 65
    2184:	89 8f       	std	Y+25, r24	; 0x19
    2186:	9a 8f       	std	Y+26, r25	; 0x1a
    2188:	ab 8f       	std	Y+27, r26	; 0x1b
    218a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	69 8d       	ldd	r22, Y+25	; 0x19
    218e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a e7       	ldi	r20, 0x7A	; 122
    219a:	53 e4       	ldi	r21, 0x43	; 67
    219c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8d 8b       	std	Y+21, r24	; 0x15
    21a6:	9e 8b       	std	Y+22, r25	; 0x16
    21a8:	af 8b       	std	Y+23, r26	; 0x17
    21aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <LCD_vidLatch+0x128>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	69 8d       	ldd	r22, Y+25	; 0x19
    21e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_vidLatch+0x188>
    2210:	89 e1       	ldi	r24, 0x19	; 25
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9a 8b       	std	Y+18, r25	; 0x12
    2216:	89 8b       	std	Y+17, r24	; 0x11
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_vidLatch+0x176>
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <LCD_vidLatch+0x16a>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	8f 87       	std	Y+15, r24	; 0x0f
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	98 89       	ldd	r25, Y+16	; 0x10
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_vidLatch+0x1b2>
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e2       	ldi	r26, 0x20	; 32
    2270:	b1 e4       	ldi	r27, 0x41	; 65
    2272:	8b 87       	std	Y+11, r24	; 0x0b
    2274:	9c 87       	std	Y+12, r25	; 0x0c
    2276:	ad 87       	std	Y+13, r26	; 0x0d
    2278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	53 e4       	ldi	r21, 0x43	; 67
    228a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8f 83       	std	Y+7, r24	; 0x07
    2294:	98 87       	std	Y+8, r25	; 0x08
    2296:	a9 87       	std	Y+9, r26	; 0x09
    2298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_vidLatch+0x216>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22da:	9e 85       	ldd	r25, Y+14	; 0x0e
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_vidLatch+0x276>
    22fe:	89 e1       	ldi	r24, 0x19	; 25
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_vidLatch+0x264>
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_vidLatch+0x258>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_vidLatch+0x2a0>
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    234e:	6d 96       	adiw	r28, 0x1d	; 29
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	2f 97       	sbiw	r28, 0x0f	; 15
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	62 e0       	ldi	r22, 0x02	; 2
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2394:	8f 85       	ldd	r24, Y+15	; 0x0f
    2396:	98 2f       	mov	r25, r24
    2398:	99 1f       	adc	r25, r25
    239a:	99 27       	eor	r25, r25
    239c:	99 1f       	adc	r25, r25
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	63 e0       	ldi	r22, 0x03	; 3
    23a2:	49 2f       	mov	r20, r25
    23a4:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    23a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23aa:	82 95       	swap	r24
    23ac:	86 95       	lsr	r24
    23ae:	86 95       	lsr	r24
    23b0:	83 70       	andi	r24, 0x03	; 3
    23b2:	98 2f       	mov	r25, r24
    23b4:	91 70       	andi	r25, 0x01	; 1
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	49 2f       	mov	r20, r25
    23bc:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c2:	82 95       	swap	r24
    23c4:	86 95       	lsr	r24
    23c6:	87 70       	andi	r24, 0x07	; 7
    23c8:	98 2f       	mov	r25, r24
    23ca:	91 70       	andi	r25, 0x01	; 1
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	49 2f       	mov	r20, r25
    23d2:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    23d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d8:	82 95       	swap	r24
    23da:	8f 70       	andi	r24, 0x0F	; 15
    23dc:	98 2f       	mov	r25, r24
    23de:	91 70       	andi	r25, 0x01	; 1
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	66 e0       	ldi	r22, 0x06	; 6
    23e4:	49 2f       	mov	r20, r25
    23e6:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	86 95       	lsr	r24
    23ee:	86 95       	lsr	r24
    23f0:	86 95       	lsr	r24
    23f2:	98 2f       	mov	r25, r24
    23f4:	91 70       	andi	r25, 0x01	; 1
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	67 e0       	ldi	r22, 0x07	; 7
    23fa:	49 2f       	mov	r20, r25
    23fc:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    2400:	8f 85       	ldd	r24, Y+15	; 0x0f
    2402:	86 95       	lsr	r24
    2404:	86 95       	lsr	r24
    2406:	98 2f       	mov	r25, r24
    2408:	91 70       	andi	r25, 0x01	; 1
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	49 2f       	mov	r20, r25
    2410:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2414:	8f 85       	ldd	r24, Y+15	; 0x0f
    2416:	86 95       	lsr	r24
    2418:	98 2f       	mov	r25, r24
    241a:	91 70       	andi	r25, 0x01	; 1
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	49 2f       	mov	r20, r25
    2422:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 2f       	mov	r25, r24
    242a:	91 70       	andi	r25, 0x01	; 1
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	49 2f       	mov	r20, r25
    2432:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	62 e0       	ldi	r22, 0x02	; 2
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e2       	ldi	r26, 0x20	; 32
    2446:	b1 e4       	ldi	r27, 0x41	; 65
    2448:	8b 87       	std	Y+11, r24	; 0x0b
    244a:	9c 87       	std	Y+12, r25	; 0x0c
    244c:	ad 87       	std	Y+13, r26	; 0x0d
    244e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	6b 85       	ldd	r22, Y+11	; 0x0b
    2452:	7c 85       	ldd	r23, Y+12	; 0x0c
    2454:	8d 85       	ldd	r24, Y+13	; 0x0d
    2456:	9e 85       	ldd	r25, Y+14	; 0x0e
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	53 e4       	ldi	r21, 0x43	; 67
    2460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	8f 83       	std	Y+7, r24	; 0x07
    246a:	98 87       	std	Y+8, r25	; 0x08
    246c:	a9 87       	std	Y+9, r26	; 0x09
    246e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	2c f4       	brge	.+10     	; 0x2492 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	3f c0       	rjmp	.+126    	; 0x2510 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	57 e4       	ldi	r21, 0x47	; 71
    24a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	4c f5       	brge	.+82     	; 0x24fc <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	51 e4       	ldi	r21, 0x41	; 65
    24ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <LCD_invidSendCommend+0x192>
    24d4:	89 e1       	ldi	r24, 0x19	; 25
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9c 83       	std	Y+4, r25	; 0x04
    24da:	8b 83       	std	Y+3, r24	; 0x03
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_invidSendCommend+0x180>
    24e4:	9c 83       	std	Y+4, r25	; 0x04
    24e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <LCD_invidSendCommend+0x174>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_invidSendCommend+0x1bc>
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	62 e0       	ldi	r22, 0x02	; 2
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
}
    252e:	2f 96       	adiw	r28, 0x0f	; 15
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <LCD_enuDisplayFloatNum>:
ES_T LCD_enuDisplayFloatNum(f32 Copy_f32Num)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	6d 97       	sbiw	r28, 0x1d	; 29
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	6a 8f       	std	Y+26, r22	; 0x1a
    2556:	7b 8f       	std	Y+27, r23	; 0x1b
    2558:	8c 8f       	std	Y+28, r24	; 0x1c
    255a:	9d 8f       	std	Y+29, r25	; 0x1d
	ES_T Local_enuErrorState = ES_NOK;
    255c:	19 8e       	std	Y+25, r1	; 0x19

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>

	s32 Local_s32ReverseINT=0;
    2568:	1d 8a       	std	Y+21, r1	; 0x15
    256a:	1e 8a       	std	Y+22, r1	; 0x16
    256c:	1f 8a       	std	Y+23, r1	; 0x17
    256e:	18 8e       	std	Y+24, r1	; 0x18
	s32 Local_s32ReverseDEC=0;
    2570:	19 8a       	std	Y+17, r1	; 0x11
    2572:	1a 8a       	std	Y+18, r1	; 0x12
    2574:	1b 8a       	std	Y+19, r1	; 0x13
    2576:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Local_u8RemainderINT=0 ,Local_u8RemainderDEC=0, Local_u8NumDigitINT=0 , Local_u8NumDigitDEC=0;
    2578:	18 8a       	std	Y+16, r1	; 0x10
    257a:	1f 86       	std	Y+15, r1	; 0x0f
    257c:	1e 86       	std	Y+14, r1	; 0x0e
    257e:	1d 86       	std	Y+13, r1	; 0x0d

	u32 Local_u32IntPart1=0 ; f32 Local_f32FloatPart=0.0 ;
    2580:	19 86       	std	Y+9, r1	; 0x09
    2582:	1a 86       	std	Y+10, r1	; 0x0a
    2584:	1b 86       	std	Y+11, r1	; 0x0b
    2586:	1c 86       	std	Y+12, r1	; 0x0c
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e0       	ldi	r26, 0x00	; 0
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	af 83       	std	Y+7, r26	; 0x07
    2596:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32IntPart2=0 ;
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	1a 82       	std	Y+2, r1	; 0x02
    259c:	1b 82       	std	Y+3, r1	; 0x03
    259e:	1c 82       	std	Y+4, r1	; 0x04
	Local_u32IntPart1 = (u32) Copy_f32Num;
    25a0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25a2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	89 87       	std	Y+9, r24	; 0x09
    25b2:	9a 87       	std	Y+10, r25	; 0x0a
    25b4:	ab 87       	std	Y+11, r26	; 0x0b
    25b6:	bc 87       	std	Y+12, r27	; 0x0c

	Local_f32FloatPart = Copy_f32Num - Local_u32IntPart1;
    25b8:	69 85       	ldd	r22, Y+9	; 0x09
    25ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    25bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    25be:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    25c4:	9b 01       	movw	r18, r22
    25c6:	ac 01       	movw	r20, r24
    25c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25d0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	af 83       	std	Y+7, r26	; 0x07
    25de:	b8 87       	std	Y+8, r27	; 0x08
	Local_u32IntPart2 = Local_f32FloatPart * 10000;
    25e0:	6d 81       	ldd	r22, Y+5	; 0x05
    25e2:	7e 81       	ldd	r23, Y+6	; 0x06
    25e4:	8f 81       	ldd	r24, Y+7	; 0x07
    25e6:	98 85       	ldd	r25, Y+8	; 0x08
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e4       	ldi	r19, 0x40	; 64
    25ec:	4c e1       	ldi	r20, 0x1C	; 28
    25ee:	56 e4       	ldi	r21, 0x46	; 70
    25f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	ab 83       	std	Y+3, r26	; 0x03
    260a:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_f32Num <0)
    260c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    260e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2610:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2612:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	0c f0       	brlt	.+2      	; 0x2626 <LCD_enuDisplayFloatNum+0xe6>
    2624:	4c c0       	rjmp	.+152    	; 0x26be <LCD_enuDisplayFloatNum+0x17e>
	{
		LCD_vidLatch('-');
    2626:	8d e2       	ldi	r24, 0x2D	; 45
    2628:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		Copy_f32Num *= -1 ;
    262c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    262e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2630:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2632:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2634:	b0 58       	subi	r27, 0x80	; 128
    2636:	8a 8f       	std	Y+26, r24	; 0x1a
    2638:	9b 8f       	std	Y+27, r25	; 0x1b
    263a:	ac 8f       	std	Y+28, r26	; 0x1c
    263c:	bd 8f       	std	Y+29, r27	; 0x1d
    263e:	3f c0       	rjmp	.+126    	; 0x26be <LCD_enuDisplayFloatNum+0x17e>
	}
	while (Local_u32IntPart1)
	{
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	ab 85       	ldd	r26, Y+11	; 0x0b
    2646:	bc 85       	ldd	r27, Y+12	; 0x0c
    2648:	2a e0       	ldi	r18, 0x0A	; 10
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	88 8b       	std	Y+16, r24	; 0x10
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
    265e:	8d 89       	ldd	r24, Y+21	; 0x15
    2660:	9e 89       	ldd	r25, Y+22	; 0x16
    2662:	af 89       	ldd	r26, Y+23	; 0x17
    2664:	b8 8d       	ldd	r27, Y+24	; 0x18
    2666:	2a e0       	ldi	r18, 0x0A	; 10
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 a5 14 	call	0x294a	; 0x294a <__mulsi3>
    2676:	9b 01       	movw	r18, r22
    2678:	ac 01       	movw	r20, r24
    267a:	88 89       	ldd	r24, Y+16	; 0x10
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	82 0f       	add	r24, r18
    2686:	93 1f       	adc	r25, r19
    2688:	a4 1f       	adc	r26, r20
    268a:	b5 1f       	adc	r27, r21
    268c:	8d 8b       	std	Y+21, r24	; 0x15
    268e:	9e 8b       	std	Y+22, r25	; 0x16
    2690:	af 8b       	std	Y+23, r26	; 0x17
    2692:	b8 8f       	std	Y+24, r27	; 0x18
		Local_u32IntPart1 /=10;
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	ab 85       	ldd	r26, Y+11	; 0x0b
    269a:	bc 85       	ldd	r27, Y+12	; 0x0c
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    26ac:	da 01       	movw	r26, r20
    26ae:	c9 01       	movw	r24, r18
    26b0:	89 87       	std	Y+9, r24	; 0x09
    26b2:	9a 87       	std	Y+10, r25	; 0x0a
    26b4:	ab 87       	std	Y+11, r26	; 0x0b
    26b6:	bc 87       	std	Y+12, r27	; 0x0c
		Local_u8NumDigitINT ++;
    26b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	8e 87       	std	Y+14, r24	; 0x0e
	if(Copy_f32Num <0)
	{
		LCD_vidLatch('-');
		Copy_f32Num *= -1 ;
	}
	while (Local_u32IntPart1)
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    26c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	a1 05       	cpc	r26, r1
    26ca:	b1 05       	cpc	r27, r1
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <LCD_enuDisplayFloatNum+0x190>
    26ce:	b8 cf       	rjmp	.-144    	; 0x2640 <LCD_enuDisplayFloatNum+0x100>
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <LCD_enuDisplayFloatNum+0x210>
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
	{
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	ab 81       	ldd	r26, Y+3	; 0x03
    26d8:	bc 81       	ldd	r27, Y+4	; 0x04
    26da:	2a e0       	ldi	r18, 0x0A	; 10
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8f 87       	std	Y+15, r24	; 0x0f
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
    26f0:	89 89       	ldd	r24, Y+17	; 0x11
    26f2:	9a 89       	ldd	r25, Y+18	; 0x12
    26f4:	ab 89       	ldd	r26, Y+19	; 0x13
    26f6:	bc 89       	ldd	r27, Y+20	; 0x14
    26f8:	2a e0       	ldi	r18, 0x0A	; 10
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 a5 14 	call	0x294a	; 0x294a <__mulsi3>
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	8f 85       	ldd	r24, Y+15	; 0x0f
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	a4 1f       	adc	r26, r20
    271c:	b5 1f       	adc	r27, r21
    271e:	89 8b       	std	Y+17, r24	; 0x11
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	ab 8b       	std	Y+19, r26	; 0x13
    2724:	bc 8b       	std	Y+20, r27	; 0x14
		Local_u32IntPart2 /=10;
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	ab 81       	ldd	r26, Y+3	; 0x03
    272c:	bc 81       	ldd	r27, Y+4	; 0x04
    272e:	2a e0       	ldi	r18, 0x0A	; 10
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    273e:	da 01       	movw	r26, r20
    2740:	c9 01       	movw	r24, r18
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	ab 83       	std	Y+3, r26	; 0x03
    2748:	bc 83       	std	Y+4, r27	; 0x04
		Local_u8NumDigitDEC ++;
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	8d 87       	std	Y+13, r24	; 0x0d
		Local_u8RemainderINT = Local_u32IntPart1 % 10;
		Local_s32ReverseINT = Local_s32ReverseINT * 10 + Local_u8RemainderINT;
		Local_u32IntPart1 /=10;
		Local_u8NumDigitINT ++;
	}
	while (Local_u32IntPart2)
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	ab 81       	ldd	r26, Y+3	; 0x03
    2756:	bc 81       	ldd	r27, Y+4	; 0x04
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	a1 05       	cpc	r26, r1
    275c:	b1 05       	cpc	r27, r1
    275e:	09 f0       	breq	.+2      	; 0x2762 <LCD_enuDisplayFloatNum+0x222>
    2760:	b8 cf       	rjmp	.-144    	; 0x26d2 <LCD_enuDisplayFloatNum+0x192>
    2762:	2d c0       	rjmp	.+90     	; 0x27be <LCD_enuDisplayFloatNum+0x27e>
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
	{
		Local_u8RemainderINT = Local_s32ReverseINT % 10;
    2764:	8d 89       	ldd	r24, Y+21	; 0x15
    2766:	9e 89       	ldd	r25, Y+22	; 0x16
    2768:	af 89       	ldd	r26, Y+23	; 0x17
    276a:	b8 8d       	ldd	r27, Y+24	; 0x18
    276c:	2a e0       	ldi	r18, 0x0A	; 10
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	88 8b       	std	Y+16, r24	; 0x10
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8RemainderINT + '0');
    278c:	88 89       	ldd	r24, Y+16	; 0x10
    278e:	80 5d       	subi	r24, 0xD0	; 208
    2790:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		Local_s32ReverseINT /= 10;
    2794:	8d 89       	ldd	r24, Y+21	; 0x15
    2796:	9e 89       	ldd	r25, Y+22	; 0x16
    2798:	af 89       	ldd	r26, Y+23	; 0x17
    279a:	b8 8d       	ldd	r27, Y+24	; 0x18
    279c:	2a e0       	ldi	r18, 0x0A	; 10
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    27ac:	da 01       	movw	r26, r20
    27ae:	c9 01       	movw	r24, r18
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
		Local_u8NumDigitINT --;
    27b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ba:	81 50       	subi	r24, 0x01	; 1
    27bc:	8e 87       	std	Y+14, r24	; 0x0e
		Local_u8RemainderDEC = Local_u32IntPart2 % 10;
		Local_s32ReverseDEC = Local_s32ReverseDEC * 10 + Local_u8RemainderDEC;
		Local_u32IntPart2 /=10;
		Local_u8NumDigitDEC ++;
	}
	while (Local_u8NumDigitINT)
    27be:	8e 85       	ldd	r24, Y+14	; 0x0e
    27c0:	88 23       	and	r24, r24
    27c2:	81 f6       	brne	.-96     	; 0x2764 <LCD_enuDisplayFloatNum+0x224>
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch(Local_u8RemainderINT + '0');
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_vidLatch('.');
    27c4:	8e e2       	ldi	r24, 0x2E	; 46
    27c6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
    27ca:	2d c0       	rjmp	.+90     	; 0x2826 <LCD_enuDisplayFloatNum+0x2e6>
	while (Local_u8NumDigitDEC)
	{
		Local_u8RemainderDEC = Local_s32ReverseDEC % 10;
    27cc:	89 89       	ldd	r24, Y+17	; 0x11
    27ce:	9a 89       	ldd	r25, Y+18	; 0x12
    27d0:	ab 89       	ldd	r26, Y+19	; 0x13
    27d2:	bc 89       	ldd	r27, Y+20	; 0x14
    27d4:	2a e0       	ldi	r18, 0x0A	; 10
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	0e 94 9d 09 	call	0x133a	; 0x133a <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8RemainderDEC + '0');
    27f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f6:	80 5d       	subi	r24, 0xD0	; 208
    27f8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <LCD_vidLatch>
		Local_s32ReverseDEC /= 10;
    27fc:	89 89       	ldd	r24, Y+17	; 0x11
    27fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2800:	ab 89       	ldd	r26, Y+19	; 0x13
    2802:	bc 89       	ldd	r27, Y+20	; 0x14
    2804:	2a e0       	ldi	r18, 0x0A	; 10
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    2814:	da 01       	movw	r26, r20
    2816:	c9 01       	movw	r24, r18
    2818:	89 8b       	std	Y+17, r24	; 0x11
    281a:	9a 8b       	std	Y+18, r25	; 0x12
    281c:	ab 8b       	std	Y+19, r26	; 0x13
    281e:	bc 8b       	std	Y+20, r27	; 0x14
		Local_u8NumDigitDEC --;
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	81 50       	subi	r24, 0x01	; 1
    2824:	8d 87       	std	Y+13, r24	; 0x0d
		LCD_vidLatch(Local_u8RemainderINT + '0');
		Local_s32ReverseINT /= 10;
		Local_u8NumDigitINT --;
	}
	LCD_vidLatch('.');
	while (Local_u8NumDigitDEC)
    2826:	8d 85       	ldd	r24, Y+13	; 0x0d
    2828:	88 23       	and	r24, r24
    282a:	81 f6       	brne	.-96     	; 0x27cc <LCD_enuDisplayFloatNum+0x28c>
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch(Local_u8RemainderDEC + '0');
		Local_s32ReverseDEC /= 10;
		Local_u8NumDigitDEC --;
	}
	return Local_enuErrorState;
    282c:	89 8d       	ldd	r24, Y+25	; 0x19
}
    282e:	6d 96       	adiw	r28, 0x1d	; 29
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <main>:
#include "KeyPad_Interface.h"

#include "util/delay.h"

int main (void)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <main+0x6>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <main+0x8>
    2848:	00 d0       	rcall	.+0      	; 0x284a <main+0xa>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	LCD_enuInit();
    284e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LCD_enuInit>
	KeyPad_enuInit();
    2852:	0e 94 b5 0b 	call	0x176a	; 0x176a <KeyPad_enuInit>
	s16 Local_s16Number1 = 0 ,Local_s16Number2 = 0;
    2856:	1d 82       	std	Y+5, r1	; 0x05
    2858:	1c 82       	std	Y+4, r1	; 0x04
    285a:	1b 82       	std	Y+3, r1	; 0x03
    285c:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_s8Operator = 0 ;
    285e:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8GetState=0 ;
    2860:	1e 82       	std	Y+6, r1	; 0x06
	while (1){
		KeyPad_enuKeyPressed(&Local_u8GetState);
    2862:	ce 01       	movw	r24, r28
    2864:	06 96       	adiw	r24, 0x06	; 6
    2866:	0e 94 12 0c 	call	0x1824	; 0x1824 <KeyPad_enuKeyPressed>
		if(Local_u8GetState >=0 && Local_u8GetState <=9)
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	8a 30       	cpi	r24, 0x0A	; 10
    286e:	e8 f5       	brcc	.+122    	; 0x28ea <main+0xaa>
		{
			LCD_enuDisplayIntegerNum(Local_u8GetState);
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 e0       	ldi	r26, 0x00	; 0
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_enuDisplayIntegerNum>
			if(Local_s8Operator == 0)
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	88 23       	and	r24, r24
    2886:	c1 f4       	brne	.+48     	; 0x28b8 <main+0x78>
			{
				Local_s16Number1 = Local_s16Number1*10;
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	9c 01       	movw	r18, r24
    288e:	22 0f       	add	r18, r18
    2890:	33 1f       	adc	r19, r19
    2892:	c9 01       	movw	r24, r18
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	82 0f       	add	r24, r18
    289e:	93 1f       	adc	r25, r19
    28a0:	9d 83       	std	Y+5, r25	; 0x05
    28a2:	8c 83       	std	Y+4, r24	; 0x04
				Local_s16Number1 += Local_u8GetState;
    28a4:	8e 81       	ldd	r24, Y+6	; 0x06
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	9d 81       	ldd	r25, Y+5	; 0x05
    28ae:	82 0f       	add	r24, r18
    28b0:	93 1f       	adc	r25, r19
    28b2:	9d 83       	std	Y+5, r25	; 0x05
    28b4:	8c 83       	std	Y+4, r24	; 0x04
    28b6:	17 c0       	rjmp	.+46     	; 0x28e6 <main+0xa6>
			}
			else
			{
				Local_s16Number2 = Local_s16Number2*10;
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	9b 81       	ldd	r25, Y+3	; 0x03
    28bc:	9c 01       	movw	r18, r24
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	c9 01       	movw	r24, r18
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	9b 83       	std	Y+3, r25	; 0x03
    28d2:	8a 83       	std	Y+2, r24	; 0x02
				Local_s16Number2 += Local_u8GetState;
    28d4:	8e 81       	ldd	r24, Y+6	; 0x06
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	9b 81       	ldd	r25, Y+3	; 0x03
    28de:	82 0f       	add	r24, r18
    28e0:	93 1f       	adc	r25, r19
    28e2:	9b 83       	std	Y+3, r25	; 0x03
    28e4:	8a 83       	std	Y+2, r24	; 0x02
			}
			Local_u8GetState = 0;
    28e6:	1e 82       	std	Y+6, r1	; 0x06
    28e8:	bc cf       	rjmp	.-136    	; 0x2862 <main+0x22>
		}
		else if(Local_u8GetState == '+' || Local_u8GetState == '*' || Local_u8GetState == '/' ||Local_u8GetState == '-')
    28ea:	8e 81       	ldd	r24, Y+6	; 0x06
    28ec:	8b 32       	cpi	r24, 0x2B	; 43
    28ee:	49 f0       	breq	.+18     	; 0x2902 <main+0xc2>
    28f0:	8e 81       	ldd	r24, Y+6	; 0x06
    28f2:	8a 32       	cpi	r24, 0x2A	; 42
    28f4:	31 f0       	breq	.+12     	; 0x2902 <main+0xc2>
    28f6:	8e 81       	ldd	r24, Y+6	; 0x06
    28f8:	8f 32       	cpi	r24, 0x2F	; 47
    28fa:	19 f0       	breq	.+6      	; 0x2902 <main+0xc2>
    28fc:	8e 81       	ldd	r24, Y+6	; 0x06
    28fe:	8d 32       	cpi	r24, 0x2D	; 45
    2900:	39 f4       	brne	.+14     	; 0x2910 <main+0xd0>
		{
			LCD_enuDisplayChar(Local_u8GetState);
    2902:	8e 81       	ldd	r24, Y+6	; 0x06
    2904:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			Local_s8Operator = Local_u8GetState;
    2908:	8e 81       	ldd	r24, Y+6	; 0x06
    290a:	89 83       	std	Y+1, r24	; 0x01
			Local_u8GetState = 0;
    290c:	1e 82       	std	Y+6, r1	; 0x06
    290e:	a9 cf       	rjmp	.-174    	; 0x2862 <main+0x22>
		}
		else if (Local_u8GetState == '=')
    2910:	8e 81       	ldd	r24, Y+6	; 0x06
    2912:	8d 33       	cpi	r24, 0x3D	; 61
    2914:	61 f4       	brne	.+24     	; 0x292e <main+0xee>
		{
			LCD_enuDisplayChar(Local_u8GetState);
    2916:	8e 81       	ldd	r24, Y+6	; 0x06
    2918:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_enuDisplayChar>
			CLC_enuStartCalculation(Local_s16Number1 , Local_s16Number2 ,Local_s8Operator);
    291c:	8c 81       	ldd	r24, Y+4	; 0x04
    291e:	9d 81       	ldd	r25, Y+5	; 0x05
    2920:	2a 81       	ldd	r18, Y+2	; 0x02
    2922:	3b 81       	ldd	r19, Y+3	; 0x03
    2924:	b9 01       	movw	r22, r18
    2926:	49 81       	ldd	r20, Y+1	; 0x01
    2928:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLC_enuStartCalculation>
    292c:	9a cf       	rjmp	.-204    	; 0x2862 <main+0x22>
		}
		else if (Local_u8GetState == 'C')
    292e:	8e 81       	ldd	r24, Y+6	; 0x06
    2930:	83 34       	cpi	r24, 0x43	; 67
    2932:	09 f0       	breq	.+2      	; 0x2936 <main+0xf6>
    2934:	96 cf       	rjmp	.-212    	; 0x2862 <main+0x22>
		{
			Local_s16Number1 = 0;
    2936:	1d 82       	std	Y+5, r1	; 0x05
    2938:	1c 82       	std	Y+4, r1	; 0x04
			Local_s16Number2 = 0;
    293a:	1b 82       	std	Y+3, r1	; 0x03
    293c:	1a 82       	std	Y+2, r1	; 0x02
			Local_s8Operator = 0;
    293e:	19 82       	std	Y+1, r1	; 0x01
			Local_u8GetState = 0;
    2940:	1e 82       	std	Y+6, r1	; 0x06
			LCD_enuSendCommand(0x01);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_enuSendCommand>
    2948:	8c cf       	rjmp	.-232    	; 0x2862 <main+0x22>

0000294a <__mulsi3>:
    294a:	62 9f       	mul	r22, r18
    294c:	d0 01       	movw	r26, r0
    294e:	73 9f       	mul	r23, r19
    2950:	f0 01       	movw	r30, r0
    2952:	82 9f       	mul	r24, r18
    2954:	e0 0d       	add	r30, r0
    2956:	f1 1d       	adc	r31, r1
    2958:	64 9f       	mul	r22, r20
    295a:	e0 0d       	add	r30, r0
    295c:	f1 1d       	adc	r31, r1
    295e:	92 9f       	mul	r25, r18
    2960:	f0 0d       	add	r31, r0
    2962:	83 9f       	mul	r24, r19
    2964:	f0 0d       	add	r31, r0
    2966:	74 9f       	mul	r23, r20
    2968:	f0 0d       	add	r31, r0
    296a:	65 9f       	mul	r22, r21
    296c:	f0 0d       	add	r31, r0
    296e:	99 27       	eor	r25, r25
    2970:	72 9f       	mul	r23, r18
    2972:	b0 0d       	add	r27, r0
    2974:	e1 1d       	adc	r30, r1
    2976:	f9 1f       	adc	r31, r25
    2978:	63 9f       	mul	r22, r19
    297a:	b0 0d       	add	r27, r0
    297c:	e1 1d       	adc	r30, r1
    297e:	f9 1f       	adc	r31, r25
    2980:	bd 01       	movw	r22, r26
    2982:	cf 01       	movw	r24, r30
    2984:	11 24       	eor	r1, r1
    2986:	08 95       	ret

00002988 <__divmodhi4>:
    2988:	97 fb       	bst	r25, 7
    298a:	09 2e       	mov	r0, r25
    298c:	07 26       	eor	r0, r23
    298e:	0a d0       	rcall	.+20     	; 0x29a4 <__divmodhi4_neg1>
    2990:	77 fd       	sbrc	r23, 7
    2992:	04 d0       	rcall	.+8      	; 0x299c <__divmodhi4_neg2>
    2994:	49 d0       	rcall	.+146    	; 0x2a28 <__udivmodhi4>
    2996:	06 d0       	rcall	.+12     	; 0x29a4 <__divmodhi4_neg1>
    2998:	00 20       	and	r0, r0
    299a:	1a f4       	brpl	.+6      	; 0x29a2 <__divmodhi4_exit>

0000299c <__divmodhi4_neg2>:
    299c:	70 95       	com	r23
    299e:	61 95       	neg	r22
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255

000029a2 <__divmodhi4_exit>:
    29a2:	08 95       	ret

000029a4 <__divmodhi4_neg1>:
    29a4:	f6 f7       	brtc	.-4      	; 0x29a2 <__divmodhi4_exit>
    29a6:	90 95       	com	r25
    29a8:	81 95       	neg	r24
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	08 95       	ret

000029ae <__udivmodsi4>:
    29ae:	a1 e2       	ldi	r26, 0x21	; 33
    29b0:	1a 2e       	mov	r1, r26
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	fd 01       	movw	r30, r26
    29b8:	0d c0       	rjmp	.+26     	; 0x29d4 <__udivmodsi4_ep>

000029ba <__udivmodsi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	ee 1f       	adc	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	a2 17       	cp	r26, r18
    29c4:	b3 07       	cpc	r27, r19
    29c6:	e4 07       	cpc	r30, r20
    29c8:	f5 07       	cpc	r31, r21
    29ca:	20 f0       	brcs	.+8      	; 0x29d4 <__udivmodsi4_ep>
    29cc:	a2 1b       	sub	r26, r18
    29ce:	b3 0b       	sbc	r27, r19
    29d0:	e4 0b       	sbc	r30, r20
    29d2:	f5 0b       	sbc	r31, r21

000029d4 <__udivmodsi4_ep>:
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	1a 94       	dec	r1
    29de:	69 f7       	brne	.-38     	; 0x29ba <__udivmodsi4_loop>
    29e0:	60 95       	com	r22
    29e2:	70 95       	com	r23
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	bd 01       	movw	r22, r26
    29ee:	cf 01       	movw	r24, r30
    29f0:	08 95       	ret

000029f2 <__divmodsi4>:
    29f2:	97 fb       	bst	r25, 7
    29f4:	09 2e       	mov	r0, r25
    29f6:	05 26       	eor	r0, r21
    29f8:	0e d0       	rcall	.+28     	; 0x2a16 <__divmodsi4_neg1>
    29fa:	57 fd       	sbrc	r21, 7
    29fc:	04 d0       	rcall	.+8      	; 0x2a06 <__divmodsi4_neg2>
    29fe:	d7 df       	rcall	.-82     	; 0x29ae <__udivmodsi4>
    2a00:	0a d0       	rcall	.+20     	; 0x2a16 <__divmodsi4_neg1>
    2a02:	00 1c       	adc	r0, r0
    2a04:	38 f4       	brcc	.+14     	; 0x2a14 <__divmodsi4_exit>

00002a06 <__divmodsi4_neg2>:
    2a06:	50 95       	com	r21
    2a08:	40 95       	com	r20
    2a0a:	30 95       	com	r19
    2a0c:	21 95       	neg	r18
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	4f 4f       	sbci	r20, 0xFF	; 255
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255

00002a14 <__divmodsi4_exit>:
    2a14:	08 95       	ret

00002a16 <__divmodsi4_neg1>:
    2a16:	f6 f7       	brtc	.-4      	; 0x2a14 <__divmodsi4_exit>
    2a18:	90 95       	com	r25
    2a1a:	80 95       	com	r24
    2a1c:	70 95       	com	r23
    2a1e:	61 95       	neg	r22
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	8f 4f       	sbci	r24, 0xFF	; 255
    2a24:	9f 4f       	sbci	r25, 0xFF	; 255
    2a26:	08 95       	ret

00002a28 <__udivmodhi4>:
    2a28:	aa 1b       	sub	r26, r26
    2a2a:	bb 1b       	sub	r27, r27
    2a2c:	51 e1       	ldi	r21, 0x11	; 17
    2a2e:	07 c0       	rjmp	.+14     	; 0x2a3e <__udivmodhi4_ep>

00002a30 <__udivmodhi4_loop>:
    2a30:	aa 1f       	adc	r26, r26
    2a32:	bb 1f       	adc	r27, r27
    2a34:	a6 17       	cp	r26, r22
    2a36:	b7 07       	cpc	r27, r23
    2a38:	10 f0       	brcs	.+4      	; 0x2a3e <__udivmodhi4_ep>
    2a3a:	a6 1b       	sub	r26, r22
    2a3c:	b7 0b       	sbc	r27, r23

00002a3e <__udivmodhi4_ep>:
    2a3e:	88 1f       	adc	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	5a 95       	dec	r21
    2a44:	a9 f7       	brne	.-22     	; 0x2a30 <__udivmodhi4_loop>
    2a46:	80 95       	com	r24
    2a48:	90 95       	com	r25
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	08 95       	ret

00002a50 <__prologue_saves__>:
    2a50:	2f 92       	push	r2
    2a52:	3f 92       	push	r3
    2a54:	4f 92       	push	r4
    2a56:	5f 92       	push	r5
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	ca 1b       	sub	r28, r26
    2a7a:	db 0b       	sbc	r29, r27
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	09 94       	ijmp

00002a88 <__epilogue_restores__>:
    2a88:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8a:	39 88       	ldd	r3, Y+17	; 0x11
    2a8c:	48 88       	ldd	r4, Y+16	; 0x10
    2a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9e:	df 80       	ldd	r13, Y+7	; 0x07
    2aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    2aac:	ce 0f       	add	r28, r30
    2aae:	d1 1d       	adc	r29, r1
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	ed 01       	movw	r28, r26
    2abc:	08 95       	ret

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
